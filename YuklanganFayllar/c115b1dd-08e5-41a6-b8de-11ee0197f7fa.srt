1
00:00:00,520 --> 00:00:01,540
С возвращением, все.

2
00:00:02,320 --> 00:00:07,030
В этом видео мы собираемся настроить нашу электронную почту и пароль для регистрации.

3
00:00:07,480 --> 00:00:12,280
Мы также хотим настроить нашу электронную почту и пароль для входа, и мы собираемся стилизовать их, чтобы мы могли

4
00:00:12,280 --> 00:00:14,680
закончите с нашей страницей аутентификации.

5
00:00:15,460 --> 00:00:22,090
Итак, чтобы мы могли работать над этим, нам нужно сначала включить провайдера, который позволяет нам предоставлять электронную почту.

6
00:00:22,090 --> 00:00:24,590
и пароль для входа в наше приложение.

7
00:00:25,180 --> 00:00:31,690
Любой метод проверки подлинности, который вы добавляете, необходим в качестве нового провайдера, который вы создаете внутри своей проверки подлинности.

8
00:00:32,440 --> 00:00:36,760
Итак, вот что я собираюсь сделать, это добавить нового провайдера, адрес электронной почты и пароль.

9
00:00:37,360 --> 00:00:44,410
Я собираюсь включить этот пароль электронной почты, который позволит им зарегистрироваться, используя его, а также для электронной почты.

10
00:00:44,410 --> 00:00:45,700
ссылка список паролей знак.

11
00:00:45,700 --> 00:00:47,050
А этот чуть лишний.

12
00:00:47,050 --> 00:00:49,480
Мне это действительно не нужно, поэтому я хочу только электронную почту.

13
00:00:49,480 --> 00:00:53,810
Пароль пароль является знаком, и вы можете включить его, но требуется гораздо больше настроек.

14
00:00:53,830 --> 00:00:57,820
По сути, когда они вводят электронное письмо, они отправляют его.

15
00:00:58,180 --> 00:01:03,940
Они получают ссылку внутри электронного письма, которое они получат для этого электронного письма, и если они подтвердят, что они

16
00:01:03,940 --> 00:01:06,580
владеть им, вернет их в приложение и войдет в них.

17
00:01:07,060 --> 00:01:08,210
Но нам это особо не нужно.

18
00:01:08,230 --> 00:01:10,360
Мы просто хотим регулярно подписываться паролем электронной почты.

19
00:01:11,780 --> 00:01:17,270
Итак, теперь, когда у нас есть пароль электронной почты внутри нашего приложения, нам нужно начать создавать этот

20
00:01:17,270 --> 00:01:17,630
форма.

21
00:01:18,380 --> 00:01:22,610
Итак, вот что я собираюсь сделать внутри нашей папки компонентов.

22
00:01:22,640 --> 00:01:28,420
Я создам новую папку и назову ее подпиской, потому что это то, что нужно.

23
00:01:28,430 --> 00:01:30,140
По сути, это наша регистрационная форма.

24
00:01:30,380 --> 00:01:33,950
Мы можем даже более явно вызвать эту регистрационную форму.

25
00:01:35,310 --> 00:01:42,060
А затем внутри, я собираюсь сделать необходимые файлы, зарегистрироваться в форме точки компонента точки GSX.

26
00:01:43,070 --> 00:01:48,920
А затем, как только мы окажемся внутри, мы просто создадим очень простую форму, чтобы знать, что она работает.

27
00:01:49,430 --> 00:01:58,460
Так что это будет форма регистрации, которая эквивалентна функциональному компоненту, который возвращается обратно.

28
00:01:59,180 --> 00:02:03,500
И здесь нам нужно немного разобраться во всех его проявлениях.

29
00:02:03,710 --> 00:02:09,020
Если вы незнакомы, мы рассмотрим это довольно кратко, но достаточно, чтобы понять, что происходит.

30
00:02:09,020 --> 00:02:09,200
на.

31
00:02:10,250 --> 00:02:14,240
Итак, нам нужно отразить то, что будет на этом форуме.

32
00:02:14,990 --> 00:02:24,890
Итак, для наших основных нужд, скажем, есть разделитель, а в разделителе просто H1 или внутри него будет

33
00:02:24,890 --> 00:02:30,260
скажем, зарегистрируйтесь, указав свой адрес электронной почты и пароль.

34
00:02:31,890 --> 00:02:34,410
И тогда нам нужен компонент формы.

35
00:02:35,740 --> 00:02:43,090
Этот компонент формы HDMI, по сути, позволяет вам сделать все эти текстовые поля внутри,

36
00:02:43,090 --> 00:02:46,270
делайте то, что вам нужно, чтобы они делали, насколько требуется форма.

37
00:02:46,720 --> 00:02:52,390
Итак, здесь вы можете делать такие вещи, как, скажем, с вашей формой, вы хотите, чтобы определенные поля были обязательными.

38
00:02:52,390 --> 00:02:56,590
и вы не хотите, чтобы форма была отправлена, если они не заполнили эти поля.

39
00:02:57,070 --> 00:03:02,560
Вы можете сделать это очень легко, используя этот компонент формы, потому что все это, по сути, делает все это для

40
00:03:02,560 --> 00:03:02,770
ты.

41
00:03:03,550 --> 00:03:06,610
Итак, давайте поговорим о том, что входит в их состав.

42
00:03:07,180 --> 00:03:10,030
Итак, мы знаем, что для нашей формы у нас есть четыре разных входа.

43
00:03:10,540 --> 00:03:15,220
Итак, давайте создадим вход и сделаем метку.

44
00:03:16,890 --> 00:03:21,270
Внутри этой метки будет некоторый текст, и мы знаем, что эти входы, все четыре из них

45
00:03:21,270 --> 00:03:21,790
требуется.

46
00:03:22,620 --> 00:03:26,040
Итак, давайте скопируем это четыре раза и начнем их заполнять.

47
00:03:26,670 --> 00:03:29,400
Первым будет отображаемое имя.

48
00:03:30,900 --> 00:03:35,850
Вторым будет электронное письмо, поэтому я просто помещаю их в ярлык.

49
00:03:37,060 --> 00:03:39,310
Третий будет паролем.

50
00:03:40,470 --> 00:03:43,230
И четвертый будет подтвержденным паролем.

51
00:03:44,880 --> 00:03:50,160
Теперь внутри этих входных данных, потому что требуется формальное подтверждение того, что если эти

52
00:03:50,160 --> 00:03:52,590
входы пусты, то это недействительно.

53
00:03:53,040 --> 00:03:59,840
Это действительно только до тех пор, пока внутри них есть реальный текст, а также для отображаемого имени.

54
00:03:59,910 --> 00:04:00,840
Какие типы?

55
00:04:01,410 --> 00:04:04,500
Таким образом, тип — это атрибут, который вы можете указать для ввода.

56
00:04:05,370 --> 00:04:06,780
Текст — это самое основное.

57
00:04:06,840 --> 00:04:08,620
Это просто означает, что для этого требуется некоторая строка.

58
00:04:08,640 --> 00:04:13,860
Это все, что нужно для электронной почты, хотя на самом деле мы можем использовать тип, называемый электронной почтой.

59
00:04:14,400 --> 00:04:19,840
Этот тип электронной почты гарантирует, что текст внутри будет проверен в формате электронного письма.

60
00:04:19,890 --> 00:04:23,140
Это означает, что у вас есть какая-то строка, а затем у вас есть символ добавления.

61
00:04:23,160 --> 00:04:26,520
У вас может быть больше строки, у вас есть точка и, наконец, еще немного строки.

62
00:04:26,850 --> 00:04:29,220
Так что в значительной степени формат, который вы всегда видите с электронной почтой.

63
00:04:30,230 --> 00:04:32,810
Вот что здорово, мы получаем это в коробке.

64
00:04:33,930 --> 00:04:37,980
Еще одна замечательная вещь заключается в том, что если браузер не поддерживает электронную почту, он вернется к использованию

65
00:04:38,130 --> 00:04:38,910
тип текста.

66
00:04:39,990 --> 00:04:45,810
Для пароля мы также можем использовать тип пароля, и это просто скроет все символы, которые

67
00:04:45,810 --> 00:04:46,650
вводятся.

68
00:04:46,770 --> 00:04:50,070
Аналогично, для подтвержденного пароля это тоже типовой пароль.

69
00:04:50,550 --> 00:04:56,310
Итак, у нас есть четыре поля ввода, или нам также нужна возможность отправить эту форму.

70
00:04:56,880 --> 00:05:03,270
К счастью для нас, React привязал обработчик событий, вызываемый при отправке, который запускает некоторый обратный вызов.

71
00:05:03,390 --> 00:05:11,730
Всякий раз, когда вы отправляете форму и отправляете форму, мы можем фактически добавить в форму дочернюю кнопку

72
00:05:11,730 --> 00:05:13,200
с типом отправки.

73
00:05:13,980 --> 00:05:20,190
Таким образом, форма будет знать, что при нажатии этой кнопки типа отправки запустите ее при обратном вызове отправки.

74
00:05:20,640 --> 00:05:22,620
и это только при обратном вызове отправки.

75
00:05:22,620 --> 00:05:28,320
Если все эти проверки для этих входных данных проходят успешно, это означает, что эти четыре обязательных поля

76
00:05:28,320 --> 00:05:31,980
заполнены в электронной почте в допустимом формате, в котором она находится.

77
00:05:32,430 --> 00:05:34,260
И я просто собираюсь сказать, что это типа.

78
00:05:34,260 --> 00:05:34,740
Подписаться.

79
00:05:36,030 --> 00:05:38,130
А пока давайте просто экспортируем значение по умолчанию.

80
00:05:38,310 --> 00:05:39,300
Это подписаться.

81
00:05:40,240 --> 00:05:44,320
Так что я просто хочу убедиться, прежде чем мы действительно добавим всю функциональность для всего этого, что

82
00:05:44,320 --> 00:05:46,120
наш компонент формы работает.

83
00:05:46,780 --> 00:05:50,800
Итак, я хочу импортировать в форму регистрации из компонентов.

84
00:05:51,640 --> 00:05:52,510
Форма регистрации.

85
00:05:53,380 --> 00:05:54,580
Подпишитесь на компонент.

86
00:05:55,740 --> 00:05:58,650
И я просто поставлю это после вот этой кнопки.

87
00:05:59,990 --> 00:06:03,020
Итак, теперь давайте сохраним это пробное приложение.

88
00:06:04,090 --> 00:06:04,660
И вот мы идем.

89
00:06:05,350 --> 00:06:11,950
Итак, у меня есть несколько автоматически заполняемых полей в моем браузере Chrome, но это наш

90
00:06:11,950 --> 00:06:12,250
форма.

91
00:06:12,250 --> 00:06:13,180
Мы видим все это здесь.

92
00:06:17,040 --> 00:06:22,140
Что нам нужно сделать сейчас, так это ввести эту функциональность, чтобы эта форма действительно была действительной.

93
00:06:22,800 --> 00:06:29,430
Для этого нам нужно отслеживать фактический ввод внутри этих вводов в наш компонент формы.

94
00:06:30,030 --> 00:06:36,210
И если мы помним из проекта Rolodex нашего монстра, мы можем сделать это, используя состояние использования, что очень удобно.

95
00:06:36,210 --> 00:06:37,830
похоже на нашу строку поиска.

96
00:06:37,860 --> 00:06:39,810
Итак, я собираюсь импортировать ваше состояние из React.

97
00:06:41,360 --> 00:06:49,130
Теперь вы можете сделать это одним из способов: вы можете отслеживать все эти четыре различных входа, используя четыре разных

98
00:06:49,130 --> 00:06:50,150
использовать значения состояния.

99
00:06:50,570 --> 00:06:55,280
Но лично я нахожу это немного громоздким, особенно потому, что я знаю, что все это сгруппировано вместе.

100
00:06:55,280 --> 00:07:02,360
в любом случае, как что-то вроде поля формы, поэтому я действительно могу создать объект, и я собираюсь назвать это

101
00:07:02,360 --> 00:07:04,580
как поля формы, например.

102
00:07:05,360 --> 00:07:08,270
Так что на самом деле это будут наши поля формы по умолчанию.

103
00:07:09,080 --> 00:07:14,870
Итак, это инициализированное значение для этих четырех значений, которые должны быть пустыми строками.

104
00:07:15,590 --> 00:07:18,050
Я просто покажу вам форму этого объекта.

105
00:07:18,380 --> 00:07:23,270
У нас будет поле с именем отображаемое имя, которое представляет собой пустой адрес электронной почты объекта, который является пустым

106
00:07:23,270 --> 00:07:29,210
строка, извините, пустой объект, пустая строка адресов электронной почты, также пустая строка пароля, также пустая строка

107
00:07:29,210 --> 00:07:34,550
строка подтверждения пароля, как вы уже догадались, тоже пустая строка.

108
00:07:35,630 --> 00:07:42,410
Итак, используя это значение сейчас, мы можем сказать, что я хочу использовать состояние.

109
00:07:43,550 --> 00:07:45,990
И я хочу, чтобы это значение называлось полями формы.

110
00:07:46,250 --> 00:07:48,980
И снова второе значение, которое мы получаем.

111
00:07:49,810 --> 00:07:50,950
Является центральной функцией.

112
00:07:51,880 --> 00:07:55,360
Теперь для вашего состояния, я собираюсь передать это значение поля формы по умолчанию.

113
00:07:55,780 --> 00:07:59,680
Таким образом, этот объект по сути является значением для полей формы.

114
00:07:59,950 --> 00:08:00,730
Это не струна.

115
00:08:00,940 --> 00:08:03,310
Это объект этих четырех точных значений.

116
00:08:04,560 --> 00:08:08,910
Что я собираюсь сделать, так это структурировать эти четыре ценности.

117
00:08:10,260 --> 00:08:14,340
Причина в том, что мы собираемся использовать эти значения где-то внутри нашего кода.

118
00:08:15,300 --> 00:08:19,440
Итак, я собираюсь подтвердить пароль, и это равнозначно полям формы.

119
00:08:20,280 --> 00:08:23,880
Итак, что происходит, этот объект передается вам как состояние по умолчанию.

120
00:08:23,880 --> 00:08:29,850
Поля формы состояния теперь представляют собой какой-то объект и уничтожение четырех значений, которые я хочу, а затем

121
00:08:29,850 --> 00:08:34,140
Я устанавливаю их как константы внутри этого компонента на случай, если они мне понадобятся.

122
00:08:35,780 --> 00:08:42,020
И что я собираюсь сделать дальше, так это выяснить, что происходит всякий раз, когда эти

123
00:08:42,020 --> 00:08:45,530
значения меняются, так что я могу обновить свои поля формы здесь.

124
00:08:45,530 --> 00:08:48,290
Я собираюсь создать функцию под названием handle change.

125
00:08:48,620 --> 00:08:54,050
И это будет общая функция, которая принимает это событие ввода при каждом изменении текста.

126
00:08:55,220 --> 00:08:59,510
Однако для того, чтобы сделать эту функцию универсальной, нам нужно иметь несколько вещей:

127
00:08:59,510 --> 00:09:05,990
чтобы сделать это общим, я имею в виду, что мы, по сути, хотим передать это в наш ввод в качестве обработчика изменений

128
00:09:06,230 --> 00:09:09,140
для каждого из наших входов.

129
00:09:09,500 --> 00:09:10,400
Мы хотели того же.

130
00:09:12,000 --> 00:09:18,120
Чтобы сделать это, нам нужно определить, какой из этих входов срабатывает, чтобы

131
00:09:18,120 --> 00:09:21,900
мы знаем, какие из этих полей формы обновлять внутри нашего состояния.

132
00:09:22,620 --> 00:09:25,890
Для этого нам действительно нужно добавить еще несколько значений.

133
00:09:26,580 --> 00:09:31,620
Таким образом, каждому входу мы можем дать имя, и это имя будет передано по событию.

134
00:09:32,280 --> 00:09:40,590
Поэтому для нашего отображаемого имени мы хотим назвать их так же, как имя фактического атрибута, который мы

135
00:09:40,590 --> 00:09:41,280
пытаюсь обновить.

136
00:09:42,000 --> 00:09:45,000
Итак, здесь, потому что мы просто сможем структурировать это.

137
00:09:46,030 --> 00:09:52,810
Как имя из события, мы собираемся использовать это имя, чтобы сообщить нашему заданному состоянию, какое из этих полей

138
00:09:52,810 --> 00:09:53,320
обновить.

139
00:09:54,100 --> 00:09:58,690
Итак, давайте просто обновим все эти разные поля с соответствующими именами.

140
00:09:58,990 --> 00:10:07,600
Электронная почта, конечно, будет электронной почтой, пароль будет паролем, а затем подтвердите пароль.

141
00:10:07,870 --> 00:10:08,410
пароль.

142
00:10:10,080 --> 00:10:13,620
Так что здесь все совпадает и соответствует этим значениям.

143
00:10:15,400 --> 00:10:20,650
Следующее, что мы хотим сделать, это получить соответствующее значение, значение, которое

144
00:10:20,650 --> 00:10:28,690
должно быть введено значение, которое, в свою очередь, мы фактически отображаем во входном сонаре, просто сделайте это,

145
00:10:29,080 --> 00:10:31,480
нам нужно передать значение здесь.

146
00:10:32,660 --> 00:10:38,990
Итак, для значения этого конкретного поля мы собираемся использовать соответствующее значение, которое мы вытащили.

147
00:10:38,990 --> 00:10:40,160
вне наших полей формы.

148
00:10:40,700 --> 00:10:43,670
Так что направление довольно круговое.

149
00:10:44,090 --> 00:10:50,240
Когда вы передаете значение, вы на самом деле говорите: Эй, значение, которое я хочу внутри этого ввода, должно

150
00:10:50,240 --> 00:10:51,620
быть ценностью в прохождении вас.

151
00:10:51,980 --> 00:10:55,700
Поэтому, если я передам строку ABC, значение должно быть ABC.

152
00:10:56,060 --> 00:10:57,530
Давайте просто сохраним это, и мы увидим.

153
00:10:58,660 --> 00:11:00,260
Вот и обновимся.

154
00:11:00,280 --> 00:11:02,860
Вы заметите, что здесь вы действительно видите отображаемое имя ABC.

155
00:11:03,920 --> 00:11:05,630
Вот что представляет ценность.

156
00:11:05,930 --> 00:11:12,050
И причина, по которой мы это делаем, заключается в том, что наши изменения цикличны, а это означает, что происходит следующее:

157
00:11:12,050 --> 00:11:15,020
значение из состояния — это значение, отображаемое на входе.

158
00:11:15,410 --> 00:11:23,090
Но когда пользователь вводит эти значения во время изменения, триггер эффективно подталкивает это поле формы.

159
00:11:23,090 --> 00:11:24,350
в наше государство.

160
00:11:24,740 --> 00:11:28,010
И опять же, наше состояние теперь будет фактически обновлять визуал здесь.

161
00:11:28,400 --> 00:11:33,920
Таким образом, визуальный аспект того, что пользователь видит в поле формы, определяется не входными данными, а

162
00:11:33,920 --> 00:11:35,450
фактически определяется нашей стоимостью.

163
00:11:35,750 --> 00:11:41,900
Таким образом, мы можем контролировать, что представляют собой эти поля и что мы с ними делаем через наше состояние.

164
00:11:42,200 --> 00:11:46,370
Я знаю, это звучит немного запутанно, но как только вы вставите его и будете следовать по намеченному пути, вы увидите

165
00:11:46,370 --> 00:11:47,120
о чем я говорю.

166
00:11:48,100 --> 00:11:50,440
Итак, здесь я хочу, чтобы значение было отображаемым именем.

167
00:11:51,220 --> 00:11:54,670
Конечно, я хочу, чтобы этот следующий для электронной почты был.

168
00:11:56,880 --> 00:11:57,390
Эл. адрес.

169
00:11:59,500 --> 00:12:08,050
И затем я хочу, чтобы значение пароля было паролем, а затем я хочу, чтобы значение для подтверждения пароля было

170
00:12:08,560 --> 00:12:09,150
подтвержденный.

171
00:12:09,250 --> 00:12:09,790
Пароль.

172
00:12:11,560 --> 00:12:17,140
Итак, для того, чтобы мы теперь правильно запускали, мы можем теперь сказать, эй, дайте мне значение, а также

173
00:12:17,140 --> 00:12:20,020
событие, потому что теперь они будут поступать через объект события.

174
00:12:20,710 --> 00:12:26,140
И тогда все, что нам нужно сделать сейчас, это просто, скажем, установить поля формы и то, что мы собираемся установить.

175
00:12:26,140 --> 00:12:30,340
Это объект, потому что мы будем обновлять только один ввод.

176
00:12:30,820 --> 00:12:35,620
Все, что я хочу сделать, это только обновить соответствующее поле формы.

177
00:12:35,890 --> 00:12:41,290
Итак, я хочу, чтобы все остальные поля, которые ранее были в состоянии, были распространены.

178
00:12:41,590 --> 00:12:47,770
Итак, это распространит все поля, а затем мы просто обновим соответствующее поле, используя

179
00:12:47,770 --> 00:12:50,340
эти квадратные скобки внутри нашего обозначения объекта.

180
00:12:50,350 --> 00:12:56,770
Итак, это говорит: «О, возьмите это значение и примените его здесь из этой переменной имени, и значение будет

181
00:12:56,770 --> 00:12:57,850
быть ценностью.

182
00:12:58,900 --> 00:13:02,260
О, вы знаете, я также заметил быструю ошибку здесь.

183
00:13:02,770 --> 00:13:05,770
Нам нужно убедиться, что мы действительно вызываем цель событий.

184
00:13:06,340 --> 00:13:11,830
Цель на самом деле собирается дать нам вещь, которая генерирует событие, и вещь в этом конкретном случае.

185
00:13:11,830 --> 00:13:12,820
случай является вводом.

186
00:13:13,300 --> 00:13:17,560
Таким образом, цель здесь даст нам все, что связано с этим вводом.

187
00:13:17,950 --> 00:13:20,260
Это то, что находится в центре внимания, а не только событие.

188
00:13:20,920 --> 00:13:26,770
Итак, у нас есть вызываемые поля формы, а также поля формы console.log.

189
00:13:27,520 --> 00:13:28,450
Так что давайте сохраним это.

190
00:13:29,140 --> 00:13:30,490
Вернемся к нашему приложению.

191
00:13:30,880 --> 00:13:31,660
Это обновление.

192
00:13:32,800 --> 00:13:36,910
И здесь мы видим, что это наше начальное пустое состояние по умолчанию, поля далекой формы.

193
00:13:37,360 --> 00:13:42,520
И когда мы начинаем печатать, мы видим, что наш объект обновляется соответствующим образом.

194
00:13:42,850 --> 00:13:43,780
Делаем пароль.

195
00:13:44,200 --> 00:13:50,470
Здесь мы видим, что они скрыты, но внутри нашего пароля мы видим, что мы действительно храним

196
00:13:50,470 --> 00:13:50,590
Это.

197
00:13:51,310 --> 00:13:55,690
А затем для электронной почты, давайте просто скажем, что они в Gmail.

198
00:13:56,350 --> 00:13:56,770
Ну вот.

199
00:13:57,280 --> 00:13:58,000
Все работает.

200
00:13:58,510 --> 00:14:00,490
Итак, весь этот код работает, как и ожидалось.

201
00:14:01,580 --> 00:14:03,950
Я определенно хочу извиниться за длину этого видео.

202
00:14:03,980 --> 00:14:05,090
Я знаю, что это довольно долго.

203
00:14:05,420 --> 00:14:10,370
Но, как видите, нам нужно было настроить множество вещей, чтобы ферма заработала.

204
00:14:10,580 --> 00:14:13,100
как нам нужно внутри этого компонента.

205
00:14:13,730 --> 00:14:16,910
Ключевым моментом здесь является то, что мы узнали новый шаблон с вашим состоянием.

206
00:14:17,240 --> 00:14:22,910
Мы узнали о настройке объекта, но только тогда, когда этот объект всегда будет связан вместе с

207
00:14:22,910 --> 00:14:24,290
какая-то конкретная логика.

208
00:14:24,680 --> 00:14:27,830
Основная причина использования этого объекта заключалась в том, чтобы мы могли генерировать размер.

209
00:14:27,830 --> 00:14:33,770
Это изменение дескриптора и в первую очередь то, что мы пытаемся сделать, это то, что мы хотим распространить этот объект и

210
00:14:33,770 --> 00:14:36,660
затем измените одно значение этого объекта.

211
00:14:36,680 --> 00:14:41,450
И мы знали, что это сработало, потому что все эти поля формы, по сути, дублируют версии

212
00:14:41,450 --> 00:14:42,200
такое же состояние.

213
00:14:42,650 --> 00:14:48,140
Их единственная разница заключается в том, какие из этих входных данных используются внутри этого объекта.

214
00:14:48,350 --> 00:14:54,290
Таким образом, этот шаблон работает только тогда, когда вы можете определить размер janiero и найти общий язык между логикой, которая

215
00:14:54,290 --> 00:14:56,030
вам нужно для этих состояний.

216
00:14:56,330 --> 00:15:00,500
И в данном случае с формой эти вводы — лучший тому пример.

217
00:15:01,220 --> 00:15:07,550
Теперь, когда мы узнали, как настроить это поле, давайте отправим его и закончим аутентификацию.

218
00:15:07,550 --> 00:15:07,790
здесь.

219
00:15:08,330 --> 00:15:09,710
Сделаем это в следующем видео.