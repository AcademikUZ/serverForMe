1
00:00:00,580 --> 00:00:05,620
Всем привет и добро пожаловать обратно в прошлом видео, мы говорили о Firebase.

2
00:00:05,920 --> 00:00:12,490
Мы настроили экземпляр Firebase на консоли Firebase, а также добавили библиотеку Firebase.

3
00:00:12,490 --> 00:00:15,700
в наше приложение React в этом видео.

4
00:00:15,700 --> 00:00:21,910
Прежде чем мы действительно приступим к написанию дополнительного кода, я просто хочу сделать концептуальный перерыв и

5
00:00:21,910 --> 00:00:29,140
понять, что происходит за кулисами, когда мы используем Firebase, а также как это на самом деле взаимодействует

6
00:00:29,140 --> 00:00:30,640
с нашим внешним приложением.

7
00:00:31,120 --> 00:00:36,820
Это ценно, потому что когда разработчики интерфейса реагируют или даже когда разработчики полного стека реагируют, это

8
00:00:36,820 --> 00:00:43,330
Для нас очень важно понимать нашу часть стека, когда дело доходит до взаимодействия с данными.

9
00:00:44,050 --> 00:00:47,920
Итак, давайте начнем с концепции crud.

10
00:00:48,580 --> 00:00:54,100
Теперь, если вы знакомы с бэкендами, если вы когда-либо работали с серверами или чем-то еще удаленно

11
00:00:54,100 --> 00:00:57,190
аналогично, вы будете знать, что означает crud.

12
00:00:57,310 --> 00:00:58,240
Но на случай, если вы этого не сделаете.

13
00:00:58,330 --> 00:01:00,820
Давайте разберемся, что означает дерьмо.

14
00:01:01,690 --> 00:01:07,120
Таким образом, Cron представляет различные способы работы с сохраненными данными.

15
00:01:07,690 --> 00:01:10,960
Эти сохраненные данные обычно находятся в базе данных.

16
00:01:11,410 --> 00:01:17,140
И вообще говоря, вы можете выполнять только действия, что и означает crud.

17
00:01:17,530 --> 00:01:20,880
C означает «Создать», чтобы вы могли создавать данные.

18
00:01:20,890 --> 00:01:26,140
Конечно, R означает Read Re просто означает получение данных.

19
00:01:26,410 --> 00:01:29,620
Вы не хотите изменять данные, вы просто хотите получить данные.

20
00:01:29,920 --> 00:01:31,810
Итак, подумайте о нашем внешнем приложении.

21
00:01:32,050 --> 00:01:37,070
Если мы хотим, чтобы он извлек некоторые данные из бэкэнда, мы просим прочитать эти данные.

22
00:01:37,090 --> 00:01:39,030
Мы не просим изменить эти данные.

23
00:01:39,040 --> 00:01:40,960
Мы просто хотим прочитать данные.

24
00:01:41,770 --> 00:01:44,050
Обновление обновляет данные.

25
00:01:44,230 --> 00:01:49,810
Итак, если мы хотим изменить некоторые поля, если мы хотим изменить, возможно, некоторые значения на части

26
00:01:49,810 --> 00:01:51,760
данных, то мы хотим обновить его.

27
00:01:52,150 --> 00:01:55,450
И тогда, конечно, удалить означает просто удалить эти данные.

28
00:01:56,020 --> 00:02:02,530
Так что это в значительной степени четыре экземпляра, которые вы можете использовать для работы с сохраненными данными.

29
00:02:04,070 --> 00:02:07,850
Давайте представим, что слева у нас есть хроника нашего веб-приложения.

30
00:02:09,030 --> 00:02:13,020
Справа у вас есть сервер Firebase, на котором размещена ваша база данных.

31
00:02:13,770 --> 00:02:18,090
Что вы должны сделать, так это сделать запрос от клоунской одежды для получения данных.

32
00:02:18,330 --> 00:02:22,230
Итак, здесь мы просим прочитать некоторые конкретные данные из Firebase.

33
00:02:22,440 --> 00:02:23,970
Возможно, это профиль пользователя.

34
00:02:24,120 --> 00:02:28,020
Возможно, это что-то связанное с коллекцией одежды.

35
00:02:28,140 --> 00:02:31,140
Может быть, это даже очень специфический предмет одежды.

36
00:02:31,260 --> 00:02:32,220
Возможно, это квитанция.

37
00:02:32,400 --> 00:02:38,190
Вы можете себе представить, что большая часть данных в приложении не будет находиться на вашем внешнем интерфейсе.

38
00:02:38,430 --> 00:02:44,160
Причина этого в том, что если вы думаете о внешнем интерфейсе, у вас есть разные пользователи, которые входят в систему.

39
00:02:44,160 --> 00:02:45,560
и выйдите из своего интерфейса.

40
00:02:45,570 --> 00:02:48,990
В результате у них есть конкретные данные, уникальные для них, которые им нужны.

41
00:02:49,140 --> 00:02:52,760
Вы не можете сохранить это на внешнем интерфейсе, вы должны иметь это в какой-то базе данных.

42
00:02:52,830 --> 00:02:54,360
Так что для нас это будет Firebase.

43
00:02:54,690 --> 00:02:57,540
Поэтому, когда нам нужны эти данные, мы собираемся получить эти данные.

44
00:02:57,540 --> 00:03:01,590
И, в свою очередь, Firebase отправит обратно запрошенные данные.

45
00:03:01,950 --> 00:03:03,000
Это будет то же самое.

46
00:03:03,000 --> 00:03:06,540
Когда вы пытаетесь обновить некоторые данные, вы собираетесь создать какие-то данные или удалить

47
00:03:06,540 --> 00:03:13,410
некоторые данные, которые вы все еще собираетесь отправить из Crown Clothing, ваш интерфейс, который запросит это на

48
00:03:13,410 --> 00:03:19,290
данные в Firebase Затем Firebase выполнит действие и вернет что-то обратно, либо

49
00:03:19,290 --> 00:03:25,500
обновленные данные или созданные данные, или даже подтверждение того, что данные были успешно удалены.

50
00:03:25,980 --> 00:03:27,320
Это вся основа.

51
00:03:27,330 --> 00:03:28,320
Это очень просто.

52
00:03:28,350 --> 00:03:30,740
Вы отправляете запрос, получаете ответ.

53
00:03:30,780 --> 00:03:33,750
Это взаимодействие между интерфейсом и Firebase.

54
00:03:34,260 --> 00:03:38,460
Но давайте подумаем о некоторых вещах, которые делают это экономическое обоснование более актуальным.

55
00:03:39,120 --> 00:03:40,740
Firebase представляет нашу базу данных.

56
00:03:41,070 --> 00:03:46,890
Наша база данных будет хранить все наши данные, будь то наши пользовательские данные или коллекция одежды.

57
00:03:46,890 --> 00:03:52,870
данные, может быть, счета-фактуры, может быть, кредитные карты людей, может быть, даже весь заработок.

58
00:03:52,890 --> 00:03:56,730
Есть много вещей, которые могут храниться в базе данных компании.

59
00:03:57,180 --> 00:04:02,550
Это означает, что многие из этих данных действительно конфиденциальны, и мы не просто хотим, чтобы кто-то мог

60
00:04:02,550 --> 00:04:08,190
создавать эти данные или читать эти данные, обновлять эти данные и определенно не уничтожать эти данные.

61
00:04:08,610 --> 00:04:11,120
Это означает, что нам нужны гарантии.

62
00:04:11,130 --> 00:04:17,400
Нам нужен какой-то метод, чтобы помешать большинству людей делать то, чего не делаем мы.

63
00:04:17,400 --> 00:04:23,520
хотим, чтобы они, или мы хотим убедиться, что определенные фрагменты данных, которые являются конфиденциальными для кого-то такого

64
00:04:23,520 --> 00:04:30,360
поскольку информация о кредитной карте человека должна быть доступна, скорее всего, только этому человеку.

65
00:04:30,840 --> 00:04:33,810
Так что здесь аутентификация становится важной.

66
00:04:34,440 --> 00:04:36,420
Итак, давайте возьмем более прямой пример.

67
00:04:36,840 --> 00:04:39,510
Допустим, я использую Chrome Cleveland.com.

68
00:04:39,990 --> 00:04:44,760
Что я собираюсь сделать, так это запросить у Firebase данные моего профиля.

69
00:04:44,940 --> 00:04:46,050
Возможно в этом профиле.

70
00:04:46,050 --> 00:04:49,050
В нем есть список моих заказов, как и моя история заказов.

71
00:04:49,170 --> 00:04:51,150
Возможно, там есть данные моей кредитной карты.

72
00:04:51,360 --> 00:04:56,310
Это может быть даже просто моя электронная почта, мой адрес и мой номер телефона, все из которых очень конфиденциальны.

73
00:04:56,310 --> 00:04:56,790
данные.

74
00:04:57,270 --> 00:05:03,330
В результате Firebase перед тем, как отправить мне эти данные и требует от меня подтверждения, что я могу получить к ним доступ

75
00:05:03,330 --> 00:05:09,240
данные, потому что Firebase не знает, как он узнает, что я должен иметь доступ к этим данным?

76
00:05:09,780 --> 00:05:13,380
Скорее всего, для этого мне нужно пройти аутентификацию в Firebase.

77
00:05:13,590 --> 00:05:19,830
Мне нужно подтвердить им, что я тот, за кого себя выдаю, и кто я есть тот, кому разрешен доступ

78
00:05:19,830 --> 00:05:21,000
данные этого профиля.

79
00:05:21,450 --> 00:05:26,520
Итак, чтобы сделать это, может быть, я вхожу в систему с помощью электронной почты или пароля или каким-то образом, Firebase должен иметь возможность

80
00:05:26,520 --> 00:05:31,710
чтобы подтвердить, что я являюсь лицом, которое должно иметь доступ к конфиденциальным данным.

81
00:05:32,010 --> 00:05:36,330
И как только я смогу это сделать, Firebase должен вернуть мне данные моего профиля.

82
00:05:36,840 --> 00:05:39,570
Это будет то же самое для другого пользователя.

83
00:05:39,750 --> 00:05:44,160
Допустим, Андре заходит на наш сайт и хочет получить доступ к данным своего профиля.

84
00:05:44,340 --> 00:05:47,070
Он собирается пройти через точно такой же поток аутентификации.

85
00:05:47,220 --> 00:05:52,020
Он собирается пройти аутентификацию в Firebase, чтобы получить доступ к своему профилю.

86
00:05:52,020 --> 00:05:52,410
данные.

87
00:05:52,650 --> 00:05:55,350
И как только он это сделает, Firebase вернет данные этого профиля.

88
00:05:55,770 --> 00:06:00,240
Но если Андре попытается получить мой профиль, данные равны данным профиля.

89
00:06:00,600 --> 00:06:04,570
Если он не сможет аутентифицироваться как я, Firebase скажет: Эй, знаешь что?

90
00:06:04,710 --> 00:06:05,520
Ошибка.

91
00:06:05,520 --> 00:06:11,220
Вы не авторизованы для получения этих данных, и здесь аутентификация становится чрезвычайно важной.

92
00:06:11,520 --> 00:06:19,590
И Firebase позволил нам использовать аутентификацию как по электронной почте, так и по паролю, но также позволяет

93
00:06:19,590 --> 00:06:21,510
нам использовать вход через Google.

94
00:06:22,080 --> 00:06:25,320
Итак, давайте представим и подумаем, как работает знак Google.

95
00:06:25,860 --> 00:06:32,730
Итак, у нас есть наш веб-сайт, у нас есть Firebase, а также у нас есть серверы Google на серверах Google.

96
00:06:32,940 --> 00:06:39,240
У него есть куча разных пользователей, которых он знает, кто они, на основании того факта, что они симпатичные.

97
00:06:39,240 --> 00:06:41,070
владеть вашей учетной записью Gmail.

98
00:06:41,070 --> 00:06:46,950
Или, по крайней мере, они знают, что когда я пытаюсь получить доступ к Айове, скажем, моя собственная учетная запись Gmail

99
00:06:46,980 --> 00:06:48,000
на gmail.com.

100
00:06:48,450 --> 00:06:51,210
Google знает, о, я знаю, кто этот пользователь.

101
00:06:51,450 --> 00:06:57,630
Если вы использовали какие-либо веб-приложения в сегодняшнюю эпоху, вы в значительной степени увидите вход в систему Google или Facebook.

102
00:06:57,630 --> 00:07:00,170
войдите в систему, даже GitHub войдите везде.

103
00:07:00,180 --> 00:07:04,650
Это очень распространено, потому что они знают, что вы какой-то пользователь.

104
00:07:04,770 --> 00:07:08,460
Они аутентифицировали вас как человека, за которого вы себя выдаете, и они.

105
00:07:08,500 --> 00:07:14,170
Мы знаем, что электронная почта уникальна, по сути потому, что они знают, что могут поделиться тем фактом, что

106
00:07:14,170 --> 00:07:18,040
они знают, что вы тот, за кого вы говорите, это два разных приложения.

107
00:07:18,640 --> 00:07:25,690
Так что помните, что на самом деле вся аутентификация заключается в том, что она может подтвердить, что вы тот, кто

108
00:07:25,690 --> 00:07:27,850
вы говорите, что вы к приложению.

109
00:07:28,090 --> 00:07:33,160
Google знает, что вы тот, за кого себя выдаете, потому что вам нужно войти в свою учетную запись Google, то есть

110
00:07:33,160 --> 00:07:36,340
что ваша электронная почта и пароль должны быть чем-то единственным, вы знаете.

111
00:07:36,520 --> 00:07:41,350
Поэтому, если вы входите в Google, Google почти уверен, что вы, вероятно, человек, который должен получить доступ

112
00:07:41,350 --> 00:07:43,490
этот аккаунт, по крайней мере, большую часть времени.

113
00:07:44,050 --> 00:07:49,090
Таким образом, Google затем может предоставить это другим приложениям, потому что Google аутентифицировал вас.

114
00:07:49,360 --> 00:07:55,120
Так что на самом деле Google помогает вам аутентифицироваться в других приложениях.

115
00:07:55,240 --> 00:07:58,270
так что вам не нужно создавать учетную запись для этих приложений.

116
00:07:58,840 --> 00:08:01,540
Итак, давайте пройдемся по потоку, скажем, для нашей одежды Crown.

117
00:08:01,810 --> 00:08:03,580
Я пытаюсь получить доступ к одежде Crown.

118
00:08:03,970 --> 00:08:06,970
Что я делаю, так это использую коронную одежду.

119
00:08:07,120 --> 00:08:08,110
Вход через Google.

120
00:08:08,320 --> 00:08:11,800
Итак, мы собираемся реализовать эту функцию дальше, но мы просто пройдемся по высокоуровневому потоку.

121
00:08:12,460 --> 00:08:17,420
Итак, я собираюсь отправить запрос на серверы Google со словами: «Эй, я хочу войти в систему для этого пользователя ecwa».

122
00:08:17,440 --> 00:08:18,490
на gmail.com.

123
00:08:18,940 --> 00:08:20,460
Я собираюсь отправить свои учетные данные.

124
00:08:20,470 --> 00:08:24,910
Я собираюсь либо войти в систему, используя свой адрес электронной почты и пароль, либо, если я уже вошел, я просто иду

125
00:08:24,910 --> 00:08:27,340
чтобы сообщить Google: «Привет, я пытаюсь войти».

126
00:08:27,790 --> 00:08:30,370
Что ж, Google скажет: «О, эти учетные данные верны?»

127
00:08:30,550 --> 00:08:32,590
Да, я могу проверить этого человека.

128
00:08:32,770 --> 00:08:38,290
Итак, я собираюсь сгенерировать художественный токен, а весь токен — это просто уникальная хешированная строка.

129
00:08:38,680 --> 00:08:40,750
Это струна, которую очень трудно разорвать.

130
00:08:40,840 --> 00:08:47,680
Но, по сути, этот жетон является подтверждением того, что я тот, за кого себя выдаю, а именно Иегуда на gmail.com.

131
00:08:48,220 --> 00:08:50,760
Затем Google отправит это обратно в Crown Clothing.

132
00:08:50,770 --> 00:08:53,020
Итак, теперь у Crown Clothing есть этот арт-жетон.

133
00:08:53,770 --> 00:08:59,620
Затем я собираюсь отправить этот токен в Firebase, что означает серверную часть или

134
00:08:59,620 --> 00:09:06,790
сервер, который представляет Firebase, чтобы проверить, могу ли я получить доступ к некоторым

135
00:09:06,790 --> 00:09:09,550
данных, к которым я пытаюсь получить доступ конкретно.

136
00:09:09,560 --> 00:09:13,300
Итак, снова Иегуда на gmail.com, возможно, это данные моего профиля.

137
00:09:13,450 --> 00:09:14,560
Возможно, это моя история заказов.

138
00:09:14,650 --> 00:09:18,580
Что бы это ни было, Firebase должен подтвердить, что я тот, за кого себя выдаю.

139
00:09:19,270 --> 00:09:24,190
Но с этим всем токеном этого недостаточно, потому что Firebase не знает, является ли этот токен отключенным.

140
00:09:24,190 --> 00:09:25,030
является действительным.

141
00:09:25,270 --> 00:09:30,430
Помните, что на данный момент Firebase не может доверять источнику, из которого он получил токен, который мог получить кто-то другой.

142
00:09:30,430 --> 00:09:32,800
просто скопировал где-то или где-то, а затем отправил.

143
00:09:33,400 --> 00:09:37,270
Это может быть просто случайный токен отключения, поэтому Firebase необходимо подтвердить.

144
00:09:37,270 --> 00:09:40,150
Это все токен действительного токена?

145
00:09:40,690 --> 00:09:46,840
Итак, что сделает Firebase, так это напрямую спросит Google, можете ли вы проверить это вне токена?

146
00:09:47,530 --> 00:09:53,940
Гугл возьмет и проверит, О, это все токен, который я там выдал?

147
00:09:53,980 --> 00:09:59,620
Google скажет: «Хорошо, если это правда, он скажет, что я проверил этот токен».

148
00:09:59,980 --> 00:10:01,780
Если нет, он просто отправит обратно ошибку.

149
00:10:01,990 --> 00:10:03,340
Но скажем, проверено.

150
00:10:03,340 --> 00:10:05,200
О, этот жетон действителен.

151
00:10:05,200 --> 00:10:06,490
Я выпустил этот токен.

152
00:10:07,060 --> 00:10:13,720
Затем Google отправит обратно токен подтверждения, подтверждающий, что полученный нами токен действительно

153
00:10:13,720 --> 00:10:14,440
действительный.

154
00:10:14,740 --> 00:10:22,300
Итак, теперь Firebase говорит: «Хорошо, тот другой токен, который мне дала Crown Clothing, теперь действительно действителен, потому что

155
00:10:22,300 --> 00:10:28,690
Firebase авторизовал этот токен, теперь он собирается создать токен доступа.

156
00:10:29,320 --> 00:10:37,240
Этот токен доступа будет определять, что пользователь должен иметь доступ к конкретному пользователю.

157
00:10:37,660 --> 00:10:45,820
Таким образом, этот доступ говорит нам, к чему Mi UA на gmail.com имеет доступ внутри базы данных.

158
00:10:46,270 --> 00:10:52,090
Итак, затем Firebase отправляет нас обратно к одежде короны, а теперь ко мне как пользователю с этим токеном доступа.

159
00:10:52,090 --> 00:10:57,280
Если я хочу сделать разные кредитные запросы к Firebase, я собираюсь сделать следующее:

160
00:10:57,280 --> 00:11:00,040
отправьте запрос вместе с токеном доступа.

161
00:11:00,490 --> 00:11:06,520
Затем Firebase проверит токен доступа, чтобы определить, какие разные вещи этот токен доступа

162
00:11:06,520 --> 00:11:07,300
имеет доступ к.

163
00:11:07,600 --> 00:11:11,470
Что означает, что этот токен доступа авторизован делать?

164
00:11:12,160 --> 00:11:19,060
Если он действителен, то он проверит запрос и скажет: «О, хорошо, вам разрешено делать и выполнять».

165
00:11:19,060 --> 00:11:19,960
этот запрос.

166
00:11:20,350 --> 00:11:25,390
Итак, что произойдет, так это то, что Firebase сгенерирует ответ, что означает, что это

167
00:11:25,390 --> 00:11:27,400
например, хорошо, вы хотите создать эти данные.

168
00:11:27,400 --> 00:11:30,280
Если у вас есть на это полномочия, я отправлю вам соответствующий ответ.

169
00:11:30,490 --> 00:11:34,390
То же самое относится и к Рейду, а это означает, что я верну вам данные, которые вы хотите прочитать,

170
00:11:34,900 --> 00:11:36,400
обновить или уничтожить.

171
00:11:36,610 --> 00:11:42,130
Если они действительны, то я отправлю соответствующий ответ, если он недействителен, то есть

172
00:11:42,130 --> 00:11:48,610
что если у вас нет доступа для выполнения того конкретного запроса, который вы пытаетесь сделать, это

173
00:11:48,610 --> 00:11:53,380
также быть в соответствующем ответе, и этот ответ возвращается к одежде короны.

174
00:11:53,830 --> 00:11:56,150
И давайте предположим, что это действительно так, и это то, что мы хотим.

175
00:11:56,170 --> 00:12:02,770
Допустим, мы хотим прочитать какие-то данные, тогда наше приложение теперь возьмет эти данные и, в свою очередь, построит

176
00:12:02,770 --> 00:12:04,270
сайт с этими данными.

177
00:12:04,750 --> 00:12:08,380
И с этого момента большая часть связи с нашей базой данных.

178
00:12:08,480 --> 00:12:14,870
Всегда будет нужен доступ к этому токену доступа, который нам нужно хранить на нашем внешнем интерфейсе, потому что

179
00:12:14,870 --> 00:12:21,170
этот токен доступа позволяет нам пропустить проверку каждого шага, который представляет токен доступа

180
00:12:21,170 --> 00:12:27,140
что-то в Firebase, что мы действительно можем делать запросы в базе данных.

181
00:12:27,890 --> 00:12:33,650
Так что это, казалось бы, сложный процесс, потому что есть много диаграмм, но я обещаю вам, как только

182
00:12:33,650 --> 00:12:38,540
мы начнем его строить, это будет намного яснее, потому что как только мы начнем его строить и реализовывать

183
00:12:38,540 --> 00:12:42,860
маленькие кусочки на передней части, все это будет щелкать более значимым образом.

184
00:12:43,220 --> 00:12:48,650
Но если вы запутались в потоке, просто посмотрите его еще раз, как только вы посмотрите его несколько раз.

185
00:12:48,650 --> 00:12:53,930
Если это неясно, то определенно становится намного яснее, потому что каждый шаг логически должен произойти.

186
00:12:54,110 --> 00:12:59,390
Если бы вы должны были авторизовать пользователя, так что теперь, когда мы это понимаем, давайте на самом деле начнем реализовывать это

187
00:12:59,390 --> 00:13:00,680
внутри нашей кодовой базы.