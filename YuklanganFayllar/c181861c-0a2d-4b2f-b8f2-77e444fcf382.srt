1
00:00:00,180 --> 00:00:01,380
С возвращением, все.

2
00:00:01,830 --> 00:00:05,340
В последнем видео мы доработали функциональность в форме регистрации.

3
00:00:05,610 --> 00:00:11,550
И в этом видео теперь нам нужно подумать о том, как на самом деле стилизовать этот компонент, но также и в

4
00:00:11,550 --> 00:00:15,510
высоком уровне, независимо от того, можем ли мы сделать какую-либо компонентизацию.

5
00:00:16,170 --> 00:00:21,630
Итак, одна из вещей и шаблонов, о которых я хочу, чтобы вы думали при работе с различными компонентами

6
00:00:21,630 --> 00:00:26,880
и различные функции - самое главное, чтобы встроить функциональность.

7
00:00:26,880 --> 00:00:32,880
Во-первых, вам не так сильно нужен стиль, как вам нужно убедиться, что фактическая функциональность

8
00:00:32,880 --> 00:00:34,020
компонента работает.

9
00:00:34,320 --> 00:00:38,460
Как только у вас появится функциональность, вы сможете начать думать о стиле и обо всем этом.

10
00:00:38,490 --> 00:00:41,190
зная, что самая сложная часть вашего кода работает.

11
00:00:41,790 --> 00:00:48,300
Итак, теперь, когда у нас есть функциональность, давайте подумаем об этих различных элементах HTML, которые у нас есть.

12
00:00:48,300 --> 00:00:51,030
и как они могут вписаться в более крупное приложение.

13
00:00:51,780 --> 00:00:57,390
Итак, когда мы смотрим на наше окончательное приложение, мы видим, что у нас есть несколько очень простых полей формы.

14
00:00:57,630 --> 00:01:04,380
Но когда мы смотрим на фактический окончательный формат, мы знаем, что здесь то, что мы сделали, на самом деле просто работает.

15
00:01:04,380 --> 00:01:05,790
на странице регистрации.

16
00:01:06,210 --> 00:01:12,810
Что нам действительно нужно, так это страница входа, что означает, что мы фактически делимся этими разными формами.

17
00:01:12,810 --> 00:01:13,410
входы.

18
00:01:14,070 --> 00:01:19,470
Итак, что мы хотим сделать, мы хотим сгенерировать размер этих входных данных, потому что, как мы видим, мы также

19
00:01:19,470 --> 00:01:23,310
в любом случае, используя его в четырех разных местах в одном и том же компоненте.

20
00:01:23,610 --> 00:01:27,360
Так что это дает нам хороший шанс подумать о переносе этого в отдельный компонент.

21
00:01:28,990 --> 00:01:34,550
Итак, чтобы начать, давайте перейдем в папку с нашими компонентами и создадим новую папку.

22
00:01:35,020 --> 00:01:39,250
Я собираюсь назвать этот ввод формы и понимание ввода формы.

23
00:01:39,280 --> 00:01:44,230
Я также собираюсь сделать этот точечный компонент ввода формы.

24
00:01:44,350 --> 00:01:45,520
Точка GSX.

25
00:01:46,030 --> 00:01:48,220
И потому что мы знаем, что нам нужно будет его стилизовать.

26
00:01:48,370 --> 00:01:52,690
Я собираюсь сделать форму ввода точечных стилей точка SAS.

27
00:01:53,980 --> 00:02:00,580
Итак, то, что я хочу сделать, находится внутри компонента, давайте подумаем о том, чтобы просто скопировать это для

28
00:02:00,580 --> 00:02:03,670
время от времени мы будем говорить о стиле компонента.

29
00:02:04,360 --> 00:02:06,790
Поэтому я хочу сделать контактную форму.

30
00:02:06,790 --> 00:02:09,850
Вход равен функциональному компоненту.

31
00:02:10,930 --> 00:02:14,170
Это просто возвращает то, что у нас есть здесь до сих пор.

32
00:02:15,220 --> 00:02:20,350
Итак, как мы видим, у нас нет ни дескриптора изменения, ни значения.

33
00:02:20,980 --> 00:02:29,800
Итак, что мы можем сделать, так это внутри реквизита, мы можем передать значение отображаемого имени, потому что это также

34
00:02:29,800 --> 00:02:31,360
собирается войти в этот лейбл.

35
00:02:32,050 --> 00:02:38,110
Итак, давайте на самом деле будем очень явными в вызове этой метки, потому что мы знаем, что это будет.

36
00:02:39,420 --> 00:02:41,400
Так что кроме лейбла, что еще есть?

37
00:02:41,790 --> 00:02:42,990
Есть замена ручки.

38
00:02:43,170 --> 00:02:46,050
Итак, давайте назовем это обработчиком изменений.

39
00:02:47,650 --> 00:02:51,850
А затем для значения здесь мы можем просто явно указать значение.

40
00:02:53,500 --> 00:03:00,520
И поскольку мы знаем, что это значение и это значение перекрываются, есть еще и это имя.

41
00:03:01,000 --> 00:03:02,980
И мы можем даже поставить имя, чтобы перекрыть.

42
00:03:03,430 --> 00:03:07,930
Там есть обязательный текст, который также принимает ввод.

43
00:03:08,470 --> 00:03:15,190
Что мы можем сделать, так это распределить значения по значениям и использовать их как обычный ввод.

44
00:03:15,670 --> 00:03:19,420
Таким образом, помимо того факта, что у нас есть этот обработчик изменений, мы можем даже вызывать его при изменении.

45
00:03:19,420 --> 00:03:24,940
На самом деле, я могу быть даже более точным в том смысле, что знаю, что этот компонент будет использоваться.

46
00:03:24,940 --> 00:03:32,830
как обычный ввод, за исключением того, что у него есть некоторые функции, где у нас, возможно, есть обертка, более высокий уровень

47
00:03:32,830 --> 00:03:36,260
родительский компонент, который, как мы видим, должен избавиться от этого предупреждения.

48
00:03:37,180 --> 00:03:43,090
Но также и все эти свойства здесь, тип, требуемый, изменение при изменении, имя, значение.

49
00:03:43,540 --> 00:03:48,910
Я просто собираюсь использовать их непосредственно в этом компоненте вместо обычного компонента ввода.

50
00:03:48,940 --> 00:03:54,370
Однако единственное новое, что не входит в это, — это маркировка всего остального.

51
00:03:54,760 --> 00:03:57,730
Я просто хочу распространить это как другой реквизит.

52
00:03:58,420 --> 00:04:03,700
И поскольку я сейчас собираю их здесь, я могу просто распределить их вот так.

53
00:04:04,930 --> 00:04:13,630
Поскольку эти другие значения реквизита поступают на этот вход, и теперь это можно использовать для замены того, что

54
00:04:13,630 --> 00:04:14,410
у нас в настоящее время есть.

55
00:04:14,800 --> 00:04:17,680
Давай просто убедимся, что я хочу взять этот компонент.

56
00:04:18,890 --> 00:04:23,030
Я хочу поделиться этим здесь, поэтому я собираюсь импортировать.

57
00:04:24,290 --> 00:04:25,310
Ввод формы.

58
00:04:27,090 --> 00:04:28,200
Я неправильно написал импорт.

59
00:04:28,950 --> 00:04:34,950
Я хочу импортировать информированный ввод из файла компонента ввода фермы.

60
00:04:35,610 --> 00:04:40,470
А затем, как я уже говорил, мы будем знать, что нам нужно это отображаемое имя.

61
00:04:40,470 --> 00:04:44,550
Итак, все эти входные данные, давайте сначала просто заменим их нашим компонентом ввода формы.

62
00:04:45,240 --> 00:04:51,990
Затем я поставлю метку, и эта метка будет указывать на значение этой метки.

63
00:04:52,680 --> 00:04:57,250
Так что продолжайте и сделайте это для всех этих других входных данных формы здесь.

64
00:04:57,270 --> 00:05:00,830
Я хочу, чтобы этикетка отправлялась на электронную почту.

65
00:05:02,940 --> 00:05:04,740
Как мы видим здесь.

66
00:05:05,700 --> 00:05:08,340
Типа, так что я собираюсь избавиться от этого.

67
00:05:09,210 --> 00:05:11,070
Это будет пароль.

68
00:05:14,680 --> 00:05:17,710
Итак, давайте напишем пароль с большой буквы.

69
00:05:19,120 --> 00:05:27,250
И тогда вместо «Труд» снова будет «Подтвердить пароль».

70
00:05:28,400 --> 00:05:34,100
Так что, если мы сохраним это, по крайней мере, мы должны увидеть, что здесь все еще работает.

71
00:05:35,180 --> 00:05:40,490
На самом деле, просто потому, что мы поместили его в наш собственный блок для каждой из этих групп, мы на самом деле видим

72
00:05:40,490 --> 00:05:42,620
что он даже принимает свою собственную форму.

73
00:05:43,430 --> 00:05:48,620
Так что здесь, если я просто наберу их, как мы видим, все по-прежнему работает потрясающе.

74
00:05:50,270 --> 00:05:56,690
Итак, теперь, когда у нас есть это, давайте начнем на самом деле стилизовать это, так что снова есть пара вещей

75
00:05:56,690 --> 00:06:02,840
которую я собираюсь показать вам с точки зрения фактического дерзости, которую я уже предоставил, и это довольно обширное

76
00:06:02,840 --> 00:06:03,440
исходный файл.

77
00:06:04,130 --> 00:06:08,630
Итак, что вам нужно, чтобы перемирие сработало, мы можем пройтись туда.

78
00:06:09,110 --> 00:06:13,130
Итак, сначала у нас есть div с именем класса и этим именем класса.

79
00:06:13,130 --> 00:06:17,000
Я хочу сказать группа, потому что это, по сути, группирует ввод формы вместе.

80
00:06:18,190 --> 00:06:28,360
И затем, что касается этой метки, этой метки, вы можете дать что-то вроде имени динамического класса, потому что

81
00:06:28,360 --> 00:06:30,430
если вы посмотрите на функциональность этого.

82
00:06:30,970 --> 00:06:33,940
Что происходит, так это то, что он сжимается или нет.

83
00:06:34,480 --> 00:06:36,300
Итак, давайте поговорим о некоторых функциях здесь.

84
00:06:37,400 --> 00:06:44,000
Это значение имени класса обычно представляет собой строку, но вы можете отобразить строку в JavaScript, что означает

85
00:06:44,000 --> 00:06:47,660
что вы действительно можете сказать это для этого имени класса.

86
00:06:48,380 --> 00:06:56,840
Я хочу отобразить некоторую интерполированную строку строки, где значение внутри будет зависеть от

87
00:06:56,840 --> 00:06:58,340
это другое значение реквизита.

88
00:06:59,630 --> 00:07:09,470
Итак, в других свойствах, если длина значения есть, это означает, что если пользователь ввел что-то в

89
00:07:09,470 --> 00:07:13,460
этот ввод, это означает, что я хочу, чтобы метка сжималась.

90
00:07:14,760 --> 00:07:19,380
Когда это происходит, это означает, что эта длина больше нуля, поэтому вы можете явно указать

91
00:07:19,380 --> 00:07:27,420
его, или вы можете просто сказать, пока он существует, потому что ноль в этом конкретном контексте на самом деле оценивает

92
00:07:27,420 --> 00:07:28,890
как ложное значение.

93
00:07:29,100 --> 00:07:33,510
Таким образом, этот тернарный оператор увидит это как ложное, когда длина равна нулю, когда она больше, это

94
00:07:33,510 --> 00:07:34,320
собирается увидеть это как истину.

95
00:07:34,740 --> 00:07:41,400
Итак, мы говорим, что если значение длины истинно, то я хочу, чтобы вы добавили этот класс сокращения.

96
00:07:42,240 --> 00:07:44,700
В противном случае просто ничего не делайте.

97
00:07:46,080 --> 00:07:49,290
Или вы даже можете просто добавить пустую строку.

98
00:07:50,390 --> 00:07:57,260
Кроме того, мы также знаем, что это метка ввода формы, а это еще один класс, который мы

99
00:07:57,260 --> 00:08:04,100
просто хочу добавить к этому, чтобы мы знали, что это за метка, и теперь внутри входов.

100
00:08:04,250 --> 00:08:10,400
Я также хочу, чтобы это имело определенное, скажем, имя класса.

101
00:08:10,880 --> 00:08:12,560
И я хочу назвать этот класс.

102
00:08:13,570 --> 00:08:14,800
Форма и поставить себя.

103
00:08:16,500 --> 00:08:21,810
Другая вещь, которую мы знаем, это то, что если нет метки, то не отображать метку, и вот что мы можем

104
00:08:21,810 --> 00:08:29,310
сделать это мы можем просто обернуть это внутри этих фигурных скобок, и мы можем просто сказать, что если метка существует,

105
00:08:30,150 --> 00:08:32,370
затем визуализируйте эту метку.

106
00:08:33,740 --> 00:08:41,090
Итак, теперь, если мы сохраним это и внутри вашей формы, стиль ввода, файл Scozzafava, просто вставьте в sass

107
00:08:41,090 --> 00:08:44,000
файл, который я предоставил вам в папке ресурсов.

108
00:08:44,780 --> 00:08:51,950
Итак, теперь, когда у нас есть стиль, давайте вернемся к нашему компоненту ввода формы и давайте импортируем в него

109
00:08:51,950 --> 00:08:52,700
файл стилей.

110
00:08:53,600 --> 00:08:56,700
Итак, давайте сохраним это и теперь вернемся к нашему приложению.

111
00:08:57,470 --> 00:08:59,780
И вот мы видим, что у нас есть наш стиль.

112
00:09:00,760 --> 00:09:04,420
Однако мы заметим, что это отображаемое имя не перемещается вверх.

113
00:09:04,810 --> 00:09:12,160
Он движется вверх, как только мы начинаем печатать, но мы также хотели двигаться вверх, когда мы фактически начинаем выбирать.

114
00:09:13,110 --> 00:09:14,310
Итак, как мы это делаем?

115
00:09:14,880 --> 00:09:17,910
Ну, я на самом деле включил звезды для вас здесь.

116
00:09:18,240 --> 00:09:21,450
И именно этот селектор, селектор CSA.

117
00:09:21,840 --> 00:09:27,900
По сути, этот код говорит о том, что для этого элемента группы, который является нашим внутренним элементом верхнего уровня,

118
00:09:28,410 --> 00:09:34,470
есть ввод формы, если вы сосредоточитесь на вводе, а это означает, что если он выбран, я хочу, чтобы вы нашли

119
00:09:34,470 --> 00:09:43,290
следующий брат или сестра с этим классом, а затем прикрепите эту термоусадочную этикетку

120
00:09:43,500 --> 00:09:46,890
Никсона, что создает эффект уменьшения этикетки.

121
00:09:47,520 --> 00:09:55,770
Но здесь мы заметили, что наш ввод на самом деле находится ниже фактической метки, а это означает, что последующий

122
00:09:55,770 --> 00:10:01,530
селектор не будет работать, потому что селектор ищет общий родственный компонент с этим

123
00:10:01,530 --> 00:10:04,590
сформируйте класс метки ввода после ввода.

124
00:10:05,070 --> 00:10:09,960
Итак, чтобы исправить это, нам просто нужно переместить этот ввод над меткой.

125
00:10:10,410 --> 00:10:15,000
И теперь, если мы вернемся назад, мы увидим, что как только мы выбираем отображаемое имя, оно работает.

126
00:10:15,840 --> 00:10:20,520
И мы также заметили, что он также работает с этим текстом, который был автоматически заполнен.

127
00:10:21,090 --> 00:10:21,660
Итак, поехали.

128
00:10:22,110 --> 00:10:28,290
Теперь у нас есть компонент ввода формы, который теперь можно использовать повторно, и мы также немного узнали о

129
00:10:28,290 --> 00:10:34,500
различными способами, которыми мы можем составлять и фактически структурировать наши компоненты, так что это немного больше

130
00:10:34,500 --> 00:10:38,430
интуитивно понятен, когда дело доходит до того, как мы настраиваем этот ввод.

131
00:10:39,400 --> 00:10:44,920
Что вы также можете сделать, если хотите быть более явным, так это фактически передать объект, который имеет все эти

132
00:10:44,920 --> 00:10:47,890
ценности как некие.

133
00:10:48,460 --> 00:10:50,020
Вы можете назвать это параметрами ввода.

134
00:10:50,380 --> 00:10:51,280
Вы тоже можете это сделать.

135
00:10:51,880 --> 00:10:54,340
Оба действительно жизнеспособные варианты.

136
00:10:54,370 --> 00:10:56,170
Это действительно зависит от вас, как вы хотите это сделать.

137
00:10:56,710 --> 00:11:00,790
Но лично, поскольку я единственный человек, пользующийся этим приложением, я собираюсь сделать это так.

138
00:11:01,180 --> 00:11:03,940
Я могу быстро показать вам, что влечет за собой другой путь.

139
00:11:04,240 --> 00:11:11,350
Все, что было бы, это то, что здесь для этой метки ввода формы, конечно, будучи меткой здесь, вы можете создать

140
00:11:11,770 --> 00:11:14,800
что-то, называемое параметрами ввода, как объект.

141
00:11:15,250 --> 00:11:17,800
И это было бы равносильно этому.

142
00:11:18,670 --> 00:11:20,890
И вместо этих знаков равенства.

143
00:11:22,430 --> 00:11:25,790
Мы можем просто сделать это, кроме текста.

144
00:11:27,070 --> 00:11:27,790
Вот этот.

145
00:11:29,460 --> 00:11:31,290
Следует сохранить.

146
00:11:31,680 --> 00:11:32,040
Упс.

147
00:11:32,950 --> 00:11:37,350
На самом деле, вот так мы просто также должны добавить запятые.

148
00:11:38,580 --> 00:11:39,780
К этим значениям здесь.

149
00:11:41,780 --> 00:11:48,410
И вместо того, чтобы интерполировать это, мы можем просто поставить эти значения как некоторые.

150
00:11:50,230 --> 00:11:57,010
И, конечно же, поскольку это объект, мы должны дважды обернуть их, а затем required = true или

151
00:11:57,310 --> 00:11:57,820
неправда.

152
00:11:59,520 --> 00:12:03,600
А теперь позвольте мне просто прокомментировать это, я просто хочу быстро показать вам этот формат.

153
00:12:04,540 --> 00:12:10,510
Если я сейчас это прокомментирую, вы заметите, что эти параметры ввода здесь передаются как объект.

154
00:12:10,900 --> 00:12:16,180
Итак, теперь вы можете зайти в компонент ввода формы и вместо того, чтобы распространять все эти

155
00:12:16,180 --> 00:12:18,040
другой реквизит, вы можете просто получить.

156
00:12:19,410 --> 00:12:21,000
Этот объект параметров ввода.

157
00:12:21,330 --> 00:12:22,440
Вы можете сделать это так.

158
00:12:23,950 --> 00:12:27,970
И теперь, если вы сохраните, вернетесь назад, мы должны увидеть только одно отображаемое имя.

159
00:12:28,390 --> 00:12:31,360
Но мы замечаем, что все работает как обычно.

160
00:12:32,260 --> 00:12:35,980
В чем преимущество использования этого формата по сравнению с другим методом реквизита?

161
00:12:36,370 --> 00:12:44,290
У вас есть немного более четкое разделение между тем, что связано с вашей входной частью, и

162
00:12:44,290 --> 00:12:46,660
фактическая часть этикетки.

163
00:12:47,110 --> 00:12:52,990
Таким образом, часть метки могла бы быть помечена как опции, если бы у нас не было ничего, кроме метки.

164
00:12:53,560 --> 00:12:59,050
Но в данном конкретном случае это позволяет нам очень четко определить, о, есть разница между

165
00:12:59,050 --> 00:13:04,540
реквизиты, которые мы получаем, связаны с нашим ярлыком, а затем все реквизиты, связанные с нашим вводом.

166
00:13:05,140 --> 00:13:08,830
Так что это также очень жизнеспособный способ разделения.

167
00:13:09,190 --> 00:13:11,080
Лично опять решать вам.

168
00:13:11,080 --> 00:13:15,400
Когда вы работаете с разными командами, вы можете принимать разные решения о том, какой из них вам подходит.

169
00:13:15,400 --> 00:13:16,270
хотите двигаться вперед с.

170
00:13:16,900 --> 00:13:18,430
Я лично просто предпочитаю этот путь.

171
00:13:19,870 --> 00:13:24,610
И давайте просто вернемся к тому, что у нас было раньше.

172
00:13:30,610 --> 00:13:37,450
Итак, теперь, когда мы определили общий размер ввода формы, нам нужно стилизовать остальную часть формы регистрации.

173
00:13:37,450 --> 00:13:40,210
себя, и мы также можем работать над формой подписи.

174
00:13:40,660 --> 00:13:42,970
Что мы и сделаем в следующем видео.