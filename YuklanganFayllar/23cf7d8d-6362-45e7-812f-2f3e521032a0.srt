1
00:00:00,090 --> 00:00:01,050
С возвращением, все.

2
00:00:02,350 --> 00:00:09,130
Итак, внутри вашей консоли, чтобы мы могли начать использовать Firestorm, вам нужно зайти в Fire Store.

3
00:00:09,130 --> 00:00:10,060
вкладка базы данных.

4
00:00:10,300 --> 00:00:17,020
И здесь вы увидите какой-то вводный экран, если вы нажмете «Создать базу данных» и здесь.

5
00:00:17,350 --> 00:00:19,160
Просто начните с производственного режима.

6
00:00:19,180 --> 00:00:24,220
На самом деле легче выдерживать производственный режим, потому что все изменения — это просто правила, которые позволяют

7
00:00:24,220 --> 00:00:27,310
вам, чтобы определить, кто получает установить различные документы.

8
00:00:28,030 --> 00:00:34,210
Так что просто нажмите «Производственный режим», нажмите «Далее», а затем по умолчанию выберите свое местоположение.

9
00:00:34,480 --> 00:00:37,150
Я выберу тебя центральным, потому что это тот, к кому я ближе всего.

10
00:00:37,600 --> 00:00:41,860
Но вы можете выбрать любой регион, который, по вашему мнению, находится ближе всего к тому месту, где вы находитесь.

11
00:00:42,010 --> 00:00:45,910
Честно говоря, в любом случае это не будет иметь большого значения для примера проекта.

12
00:00:46,690 --> 00:00:47,750
Так что я сейчас выберу.

13
00:00:47,750 --> 00:00:51,510
У меня пять центральных офисов в США, и я сейчас нажму «Включить».

14
00:00:51,520 --> 00:00:56,140
Это произойдет, если он на самом деле сгенерирует для нас базу данных.

15
00:00:58,480 --> 00:01:01,540
Так что, как только он будет закончен, вы должны увидеть этот вид прямо здесь.

16
00:01:02,050 --> 00:01:05,560
Конечно, как я уже говорил, у нас пустая база данных, так что это даже не имеет значения.

17
00:01:06,520 --> 00:01:11,350
И что вы собираетесь делать, так это щелкать правила здесь, внутри правил.

18
00:01:11,710 --> 00:01:17,680
Эти правила определяют, кому разрешено изменять какие документы здесь.

19
00:01:17,680 --> 00:01:20,380
Мы по-настоящему поиграем с этим немного позже.

20
00:01:20,650 --> 00:01:25,360
Прямо сейчас мы просто хотим, чтобы это было как можно более общим и открытым, потому что мы собираемся быть единственными

21
00:01:25,360 --> 00:01:31,270
люди развиваются против этого, так что я хочу, чтобы вы сделали, я хочу, чтобы вы переключили это разрешенное право чтения.

22
00:01:31,450 --> 00:01:36,160
Если от ложного до истинного, то вы нажмете «Опубликовать».

23
00:01:36,820 --> 00:01:44,110
Теперь это позволит нам вносить любые изменения в любой документ внутри.

24
00:01:44,110 --> 00:01:45,130
этой базы данных.

25
00:01:45,340 --> 00:01:46,080
Это не имеет значения.

26
00:01:46,090 --> 00:01:48,460
Мы можем читать, мы можем писать, мы можем делать все, что захотим.

27
00:01:48,730 --> 00:01:49,600
Вот чего мы хотим.

28
00:01:50,290 --> 00:01:57,130
И теперь, когда у нас есть эти настройки, мы можем приступить к реализации хранения пользователей внутри нашего

29
00:01:57,130 --> 00:01:57,850
облачный магазин.

30
00:01:58,330 --> 00:01:59,480
Итак, давайте сделаем это.

31
00:01:59,500 --> 00:02:01,000
Вернемся к нашему приложению.

32
00:02:02,110 --> 00:02:08,740
И внутри нашего приложения мы хотим теперь перейти к нашим собакам Firebase utils, точно так же, как приложение Firebase.

33
00:02:08,740 --> 00:02:14,770
и Firebase Auth, Firestorm, как я уже упоминал, это другой сервис, поэтому нам нужно импортировать некоторые

34
00:02:14,770 --> 00:02:19,000
методы из Firebase Firestar.

35
00:02:20,120 --> 00:02:24,380
И, как и в случае с get off, нам нужно создать экземпляр Firestar.

36
00:02:24,710 --> 00:02:26,330
Итак, нам нужен Firestorm.

37
00:02:27,140 --> 00:02:29,600
Ну и нам также нужны наши три других метода.

38
00:02:30,110 --> 00:02:31,460
Нам нужен метод doc.

39
00:02:31,700 --> 00:02:37,850
И что этот метод doc позволяет нам делать, так это извлекать документы из нашей базы данных Firestar.

40
00:02:38,480 --> 00:02:43,490
Но как вы получаете эти данные или как вы устанавливаете эти данные в этих документах?

41
00:02:43,970 --> 00:02:47,780
Здесь вам понадобятся методы get doc и set doc.

42
00:02:48,410 --> 00:02:54,080
Итак, я знаю, что это похоже на получение документа или настройку документа, но что они на самом деле представляют

43
00:02:54,080 --> 00:02:58,280
вы получаете данные документов или устанавливаете данные документов.

44
00:02:58,850 --> 00:03:06,290
Doc — это то, что вам нужно, чтобы фактически получить экземпляр документа, но когда вы хотите получить доступ к данным в этих

45
00:03:06,290 --> 00:03:08,150
документы, вам нужно использовать get doc.

46
00:03:08,150 --> 00:03:10,610
И когда вы хотите установить данные, вам нужен документ.

47
00:03:10,940 --> 00:03:13,050
Так что я знаю, что это словоблудие кажется немного запутанным.

48
00:03:13,070 --> 00:03:16,850
К сожалению, именно так Firebase решила назвать эти методы.

49
00:03:17,180 --> 00:03:19,280
Но как только вы их используете, вы станете более знакомыми.

50
00:03:19,790 --> 00:03:24,800
Итак, теперь, когда мы импортировали наши методы, давайте на самом деле создадим экземпляр того, что нам нужно создать.

51
00:03:25,190 --> 00:03:29,630
Итак, во-первых, как я уже упоминал, мы знаем, что нам нужно создать БД.

52
00:03:30,020 --> 00:03:35,480
Так что я просто назову эту БД для базы данных, что эквивалентно вызову get firestorm.

53
00:03:37,280 --> 00:03:38,420
Получить Огненный шторм.

54
00:03:39,470 --> 00:03:42,920
Я случайно автоматически импортировал сюда этот тип, но он нам не нужен.

55
00:03:43,640 --> 00:03:50,720
Итак, как только мы создали экземпляр нашего хранилища огня, мы можем использовать его для фактического доступа к нашей базе данных.

56
00:03:51,170 --> 00:03:57,260
Таким образом, этот экземпляр singleton позволяет нам теперь сообщить Firebase, когда мы хотим получить документ или мы хотим

57
00:03:57,260 --> 00:04:00,440
установить документ или что-то подобное, связанное с нашей базой данных.

58
00:04:00,680 --> 00:04:05,930
Это база данных, которую мы собираемся передать, потому что она на самом деле напрямую указывает на нашу базу данных.

59
00:04:06,110 --> 00:04:07,190
внутри консоли.

60
00:04:08,510 --> 00:04:15,670
Итак, чтобы использовать его, например, мы просто создадим некоторый метод,

61
00:04:15,680 --> 00:04:19,400
Я собираюсь назвать это созданием пользовательского документа.

62
00:04:20,670 --> 00:04:22,690
Так что я могу быть даже более явным.

63
00:04:22,710 --> 00:04:25,800
Назовем его создание пользовательского документа из.

64
00:04:29,010 --> 00:04:35,880
И что это за метод, так это асинхронная функция, которая получает некоторый объект аутентификации пользователя, потому что

65
00:04:35,880 --> 00:04:41,700
это действительно то, что мы получаем в любом случае от нашей аутентификации Firebase или подписи Google.

66
00:04:43,100 --> 00:04:48,560
Кем бы мы ни были, совет записывался ранее, вот что мы собираемся пройти, мы хотим пройти

67
00:04:48,560 --> 00:04:50,450
что-то конкретное, и мы рассмотрим, что это такое.

68
00:04:51,080 --> 00:04:57,650
Но все, о чем мы сейчас думаем, это то, что нам нужна функция, которая будет принимать данные, которые мы

69
00:04:57,650 --> 00:05:03,740
полученный от службы аутентификации, а затем мы собираемся сохранить его внутри Firestorm.

70
00:05:04,520 --> 00:05:11,750
Так что здесь все станет немного более запутанным только потому, что мы должны следовать

71
00:05:11,750 --> 00:05:15,800
вместе с тем, как мы используем эти методы, которые мы импортировали.

72
00:05:16,100 --> 00:05:22,730
Итак, помните, что нам нужно сделать в первую очередь, нам нужно увидеть, существует ли существующая ссылка на документ.

73
00:05:23,480 --> 00:05:30,890
Поэтому, когда я говорю «отсылка», я имею в виду особый тип объекта, который используется в рассказе, когда речь идет о реальных событиях.

74
00:05:30,890 --> 00:05:33,950
экземпляр модели документа.

75
00:05:34,850 --> 00:05:38,720
Так что, чтобы внести ясность, я назову этот документ грубым пользовательским документом ref.

76
00:05:39,020 --> 00:05:42,620
И это равно doc, а Doc принимает три аргумента.

77
00:05:42,920 --> 00:05:45,200
Первое, что требуется, — это база данных.

78
00:05:45,530 --> 00:05:50,120
Итак, мы используем наш экземпляр базы данных Firestar, поэтому мы собираемся передать его в качестве нашего первого аргумента.

79
00:05:50,900 --> 00:05:56,270
Вторым будет коллекция, поэтому мы знаем, что будем называть ее коллекциями наших пользователей.

80
00:05:57,590 --> 00:06:03,050
И затем третий будет каким-то идентификатором, который скажет ему, что это было.

81
00:06:03,350 --> 00:06:04,070
Так ты помнишь?

82
00:06:04,070 --> 00:06:09,770
Ну, я показал вам в нашем слайд-шоу в прошлом видео, и я показал вам, что идентификатор был Nike Air

83
00:06:09,770 --> 00:06:11,270
Макс или Адидас.

84
00:06:11,270 --> 00:06:12,740
NMD с большой буквы.

85
00:06:12,740 --> 00:06:19,730
И вообще, если помните, он выглядит примерно как вот этот Nike Air Max, вот этот идентификатор

86
00:06:19,730 --> 00:06:20,870
является уникальным идентификатором.

87
00:06:21,710 --> 00:06:24,470
Точно так же нам нужен уникальный идентификатор, чтобы это работало.

88
00:06:25,070 --> 00:06:26,570
Итак, каков наш уникальный идентификатор?

89
00:06:27,290 --> 00:06:30,140
Что ж, давайте сначала посмотрим на наш вход.

90
00:06:30,740 --> 00:06:34,400
Мы запишем ответ в console.log и посмотрим на него, чтобы увидеть, к чему у нас есть доступ.

91
00:06:34,730 --> 00:06:35,990
Итак, давайте перейдем к нашему приложению.

92
00:06:36,470 --> 00:06:37,700
Откроем нашу консоль.

93
00:06:38,820 --> 00:06:41,010
И давайте просто нажмем войти с помощью Google.

94
00:06:43,630 --> 00:06:50,650
Вот, давайте зарегистрируемся и посмотрим внимательно на этот объект, который был скрыт, регистрируясь здесь, внутри

95
00:06:50,650 --> 00:06:54,160
здесь есть несколько вещей, таких как тип операции и поставщик.

96
00:06:54,670 --> 00:07:00,670
На самом деле нас это не волнует, тогда как этот пользовательский объект, это тот объект аутентификации

97
00:07:00,670 --> 00:07:03,340
Я говорил о том, что поставляется с токеном доступа.

98
00:07:04,030 --> 00:07:09,340
Что нас действительно волнует, так это тот факт, что здесь мы получаем отображаемое имя, мы получаем электронное письмо, мы знаем

99
00:07:09,340 --> 00:07:14,140
если это проверено, а затем есть другая информация, такая как номер телефона, URL-адрес фотографии.

100
00:07:14,800 --> 00:07:23,650
Но самое главное, есть you ID. Это уникальный идентификатор ID, который мы получаем с этим объектом.

101
00:07:24,160 --> 00:07:28,540
Таким образом, мы могли бы также использовать этот UIDAI в качестве нашего уникального идентификатора.

102
00:07:29,380 --> 00:07:35,590
Итак, прямо сейчас мы находимся в процессе создания этого пользовательского экземпляра внутри огненной бури.

103
00:07:36,560 --> 00:07:37,910
Так мы никогда не делали этого раньше.

104
00:07:39,470 --> 00:07:45,770
Итак, что мы можем сделать, так это сказать: «ОК, то, что я хочу, чтобы вы искали, находится за пределами этого пользователя, за пределами объекта».

105
00:07:46,010 --> 00:07:51,050
Этот UID и я хочу, чтобы вы использовали его в качестве уникального идентификатора для получения ссылки на документ.

106
00:07:51,860 --> 00:08:01,280
Что интересно в Google Firestorm, так это то, что прямо сейчас, как мы ясно видели, мы

107
00:08:01,280 --> 00:08:08,030
у нас нет ссылки на документ в нашей базе данных, у нас даже нет пользовательской коллекции.

108
00:08:08,630 --> 00:08:11,870
Но Google все равно сгенерирует для вас этот объект.

109
00:08:12,230 --> 00:08:13,310
Итак, позвольте мне показать вам, что я имею в виду.

110
00:08:13,790 --> 00:08:21,800
Давайте зайдем внутрь нашего бесшумного компонента и импортируем в соответствующий файл.

111
00:08:22,930 --> 00:08:23,950
От вирусных утилит.

112
00:08:24,160 --> 00:08:29,110
На самом деле, я уже импортирую его сюда, так что я просто перенесу это сюда.

113
00:08:30,600 --> 00:08:38,000
И что я хочу сделать, так это вызвать этот метод с помощью ответов, использовать наш объект.

114
00:08:38,010 --> 00:08:40,800
Помните, что это был конкретный объект прямо здесь.

115
00:08:41,310 --> 00:08:43,170
Тот, что здесь, не принадлежит пользователю.

116
00:08:43,650 --> 00:08:44,670
Так что я собираюсь принять это.

117
00:08:45,480 --> 00:08:50,550
Я собираюсь удалить ответ, потому что это действительно все, что я хочу, и я собираюсь передать это

118
00:08:50,550 --> 00:08:52,230
в качестве пользователя выкл.

119
00:08:52,710 --> 00:08:54,210
Так что это из утилит Firebase.

120
00:08:54,210 --> 00:09:00,450
Я отключаю этого пользователя, а затем, по сути, говорю: «Эй, дайте мне ссылку на документ».

121
00:09:01,450 --> 00:09:06,960
Внутри этой базы данных под коллекцией пользователя с этим кабинетом пользователя UIDAI.

122
00:09:07,960 --> 00:09:11,930
Как мы знаем, внутри наших коллекций ничего нет.

123
00:09:11,950 --> 00:09:13,010
У нас даже коллекций нет.

124
00:09:13,060 --> 00:09:14,920
Мы только что создали базу данных ранее.

125
00:09:15,670 --> 00:09:19,480
Итак, что же это будет логировать, когда вы увидите это внутри.

126
00:09:20,550 --> 00:09:23,700
Здесь давайте обновим, потому что мы только что добавили немного кода.

127
00:09:25,840 --> 00:09:27,430
Я нажимаю войти с всплывающим окном Google.

128
00:09:28,390 --> 00:09:29,530
Я нажимаю выравнивание.

129
00:09:30,160 --> 00:09:35,890
Итак, теперь происходит то, что он возвращает нам этот ответ, и мы передаем его в наше новое создание.

130
00:09:35,890 --> 00:09:36,340
метод.

131
00:09:36,790 --> 00:09:40,750
И тут, видите, мы действительно вернули какой-то объект.

132
00:09:41,560 --> 00:09:49,270
Этот объект на самом деле является объектом, который представляет ссылку на некоторый документ в базе данных.

133
00:09:49,990 --> 00:09:55,230
Однако мы знаем, что на самом деле у нас нет значения, но здесь эта идея заключается в том, что вы думаете

134
00:09:55,260 --> 00:10:01,300
мы только что использовали и часть, ну, это указывает на нашу коллекцию пользователей, но тогда это также указывает

135
00:10:01,300 --> 00:10:02,950
к этому UID.

136
00:10:03,700 --> 00:10:05,590
Но мы знаем, что здесь ничего не существует.

137
00:10:05,620 --> 00:10:08,140
На самом деле нет никаких данных, которые мы можем получить от этого.

138
00:10:09,160 --> 00:10:11,740
Так почему же Google создал это для нас?

139
00:10:12,280 --> 00:10:20,200
Причина, по которой Google сделал это, заключается в том, что эта ссылка указывает на некую теперь уникальную точку внутри

140
00:10:20,200 --> 00:10:20,770
база данных.

141
00:10:21,340 --> 00:10:25,030
Там нет ничего для этого идентификатора, поэтому Google такой: «Хорошо, ничего страшного».

142
00:10:25,040 --> 00:10:27,430
Я не собираюсь ничего перезаписывать этим идентификатором.

143
00:10:28,450 --> 00:10:35,050
Таким образом, предоставляя нам эту ссылку, Google хочет, чтобы мы использовали этот конкретный объект ссылки на документ, который

144
00:10:35,050 --> 00:10:42,580
они предоставили нам для того, чтобы установить данные там, потому что это уже как бы указывает на какое-то место внутри

145
00:10:42,580 --> 00:10:43,320
нашей базы данных.

146
00:10:43,330 --> 00:10:48,460
Вы можете себе представить, что теперь есть коллекция этого пользователя, которую Google еще не создал, но он знает

147
00:10:48,460 --> 00:10:49,420
что указывает здесь.

148
00:10:49,660 --> 00:10:53,440
И затем внутри коллекции этого пользователя находится этот конкретный идентификатор пользователя.

149
00:10:54,400 --> 00:10:55,480
Сейчас их нет.

150
00:10:55,480 --> 00:11:00,700
Но если мы хотим установить данные, Google, по крайней мере, знает, о, я собираюсь установить их внутри пользователей.

151
00:11:00,820 --> 00:11:01,870
для этого конкретного идентификатора.

152
00:11:02,530 --> 00:11:04,030
Это именно то, что Google собирается сделать.

153
00:11:05,290 --> 00:11:11,230
Итак, теперь, когда у нас есть это, как мы на самом деле выясняем, как проверить некоторые данные?

154
00:11:12,070 --> 00:11:14,320
Ну, как мы это делаем, мы используем это.

155
00:11:15,430 --> 00:11:20,680
Метод, который я рассказывал о разговоре, помните, что он попытается получить данные, связанные с

156
00:11:20,680 --> 00:11:21,260
документ.

157
00:11:21,880 --> 00:11:27,400
Итак, чтобы сделать это, мы собираемся сказать: «ОК, оспорить снимок пользователя».

158
00:11:27,430 --> 00:11:29,530
Снимок похож на данные.

159
00:11:29,740 --> 00:11:31,810
Это также особый вид объекта.

160
00:11:32,230 --> 00:11:37,720
Мы собираемся использовать a, потому что Google должен сделать это асинхронно, скажем, получить документ для нашего

161
00:11:37,720 --> 00:11:39,280
документ пользователя исх.

162
00:11:40,470 --> 00:11:47,520
А теперь, что произойдет, если мы сохраним это и позволим console.log использовать наш снимок как

163
00:11:47,520 --> 00:11:47,730
Что ж.

164
00:11:50,880 --> 00:11:53,700
Если мы вернемся сейчас, мы обновим.

165
00:11:55,820 --> 00:11:57,410
Мы входим в систему с помощью всплывающего окна Google.

166
00:11:59,430 --> 00:12:03,390
Теперь, что произойдет, как мы уже знаем, мы по-прежнему часто видим две вещи.

167
00:12:04,260 --> 00:12:07,270
Первое, что мы увидим, это наш пользовательский документ.

168
00:12:07,290 --> 00:12:08,460
Мы уже видели это раньше.

169
00:12:08,850 --> 00:12:14,100
Но теперь мы также видим этот новый снимок документа.

170
00:12:15,150 --> 00:12:23,490
Этот снимок снова указывает на тот же идентификатор, но теперь это особый объект, потому что на этом объекте

171
00:12:23,490 --> 00:12:28,410
это разные способы, которыми мы можем проверить, существует ли этот документ.

172
00:12:29,010 --> 00:12:35,850
Так что я на самом деле собираюсь напрямую использовать метод с именем exists, если вы сохраните это сейчас.

173
00:12:36,360 --> 00:12:37,890
И давайте снова пройдемся по этому потоку.

174
00:12:38,340 --> 00:12:39,120
Это обновление.

175
00:12:40,240 --> 00:12:41,350
Понятно, наша консоль.

176
00:12:42,690 --> 00:12:43,770
Вход через Google?

177
00:12:46,460 --> 00:12:47,840
Я собираюсь войти в EÜ.

178
00:12:49,530 --> 00:12:51,810
То, что мы увидим, неверно.

179
00:12:52,020 --> 00:12:57,600
Логическое значение, поэтому использование этого объекта на самом деле является методом, называемым exists, который сообщает нам, является ли

180
00:12:57,600 --> 00:13:04,920
или внутри нашей базы данных эта ссылка и данные, относящиеся к ссылке, вообще не существуют?

181
00:13:05,010 --> 00:13:05,940
Ну, мы знаем, что это не так.

182
00:13:05,950 --> 00:13:07,890
Мы знаем, что у нас есть пустая коллекция.

183
00:13:08,550 --> 00:13:14,310
Вот как вы можете проверить, основаны ли они на документе и данных, которые вы ищете в этом

184
00:13:14,310 --> 00:13:19,950
документ, если какой-либо из них существует или нет, используя его, мы можем создавать шаблоны для определения

185
00:13:19,950 --> 00:13:24,360
что, если в базе данных есть подходящее место для этих данных, верните их мне.

186
00:13:24,600 --> 00:13:26,580
Если нет, создайте его для меня.

187
00:13:26,580 --> 00:13:28,350
И это поток, которому мы собираемся следовать.

188
00:13:29,040 --> 00:13:34,110
Итак, я знаю, что здесь нам предстоит многое узнать о документах, ссылках на документы, а затем о документах.

189
00:13:34,110 --> 00:13:34,830
снимки.

190
00:13:34,830 --> 00:13:36,600
Типа, Вау, что это за новинки?

191
00:13:37,020 --> 00:13:42,480
Ну, основная идея как раз в том, что это те инструменты, которые Google решил использовать быстрее, чтобы

192
00:13:42,480 --> 00:13:46,350
лучше всего хранить вещи внутри огненной бури.

193
00:13:47,070 --> 00:13:48,420
Так что, если это немного сбивает с толку, не волнуйтесь.

194
00:13:48,420 --> 00:13:51,810
В следующих нескольких видеороликах мы будем много работать с ним, чтобы лучше понять его.

195
00:13:52,350 --> 00:13:53,970
Так что, по крайней мере, здесь у нас есть идея высокого уровня.

196
00:13:54,300 --> 00:13:58,950
В следующем видео давайте начнем использовать моментальный снимок и запишем остальную часть нашего

197
00:13:58,950 --> 00:14:02,040
функция, чтобы начать хранить этот материал внутри нашей базы данных.

198
00:14:02,280 --> 00:14:03,330
Так что посмотрю в следующем видео.