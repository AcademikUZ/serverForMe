1
00:00:00,490 --> 00:00:01,450
С возвращением, все.

2
00:00:02,200 --> 00:00:06,880
И последнее видео, в котором я бросил вызов, чтобы попробовать создать этот метод отправки дескриптора самостоятельно.

3
00:00:07,330 --> 00:00:11,620
Надеюсь, это сработало, и теперь вы можете регистрировать пользователей, используя адрес электронной почты и пароль.

4
00:00:12,040 --> 00:00:13,100
Это действительно круто, если вы это сделали.

5
00:00:13,120 --> 00:00:14,890
Если нет, давайте сделаем это вместе.

6
00:00:14,920 --> 00:00:15,760
Никаких забот.

7
00:00:16,660 --> 00:00:22,180
Итак, вот что мы знаем, так это то, что для регистрации пользователя первым шагом, который нам нужно подтвердить, является ли

8
00:00:22,180 --> 00:00:23,650
или не совпадают их пароли.

9
00:00:24,190 --> 00:00:29,680
Итак, здесь я хочу сказать, что если пароль не равен, подтвердите пароль.

10
00:00:31,110 --> 00:00:37,830
Затем я хочу предупредить их, что ваши пароли не совпадают.

11
00:00:39,400 --> 00:00:42,730
А потом я просто хочу выйти, потому что не хочу продолжать дальше.

12
00:00:42,820 --> 00:00:45,640
Я уже сказал им, что теперь им нужно обновить свои пароли.

13
00:00:46,390 --> 00:00:51,340
На самом деле есть еще один способ, которым вы можете добавить дополнительные проверки к этому паролю и подтвердить пароль

14
00:00:51,640 --> 00:00:56,440
путем добавления дополнительных проверок длины внутри самих полей ввода.

15
00:00:57,040 --> 00:01:04,360
Я собираюсь дать вам ссылку на входную документацию для этого элемента HDMI, поэтому, если вы хотите добавить больше

16
00:01:04,360 --> 00:01:09,010
функциональность самостоятельно, например, добавление требований к длине и тому подобное.

17
00:01:09,160 --> 00:01:10,180
Вы можете сделать это сами.

18
00:01:10,570 --> 00:01:16,270
Я не собираюсь добавлять ничего из этого только потому, что для меня этого достаточно, чтобы получить представление о том, что

19
00:01:16,270 --> 00:01:17,440
Я пытаюсь построить с этой формой.

20
00:01:18,510 --> 00:01:24,210
И еще одна вещь, которую я хочу сделать сейчас, это как только я убедился, что пароли и подтверждение пароля совпадают,

21
00:01:24,600 --> 00:01:28,980
Мне нужно продолжить и попытаться создать этого пользователя.

22
00:01:29,460 --> 00:01:36,570
Итак, как и раньше, мы попытаемся поймать, потому что когда мы попытаемся вызвать наш сервер Firebase,

23
00:01:36,570 --> 00:01:37,560
мы можем потерпеть неудачу.

24
00:01:38,220 --> 00:01:42,810
И если мы потерпим неудачу, мы хотим иметь возможность поймать эту ошибку здесь, внутри попытки.

25
00:01:42,840 --> 00:01:51,120
Что я собираюсь сделать, так это обязательно вызвать этот метод, который мы только что создали, т.е.

26
00:01:51,120 --> 00:01:53,520
создать пользователя с электронной почтой и паролем.

27
00:01:54,880 --> 00:02:00,940
И вот что я собираюсь сделать, так это передать ему значение электронной почты и значение пароля.

28
00:02:01,810 --> 00:02:05,380
Это два значения, которые мы структурировали из наших полей формы.

29
00:02:06,870 --> 00:02:14,040
Затем я собираюсь убедиться, что я знаю, что это такое, что этот ответ является первым.

30
00:02:14,070 --> 00:02:16,620
прежде чем я начну работать с чем-либо еще.

31
00:02:17,220 --> 00:02:20,760
Итак, в этом конкретном случае, скажем, мы также получаем ошибку.

32
00:02:20,770 --> 00:02:25,560
Давайте просто поймаем ошибку и давайте просто выведем ошибку из консоли.

33
00:02:26,670 --> 00:02:28,260
Мы также можем консольно зарегистрировать ошибку.

34
00:02:29,100 --> 00:02:36,690
Может быть, сейчас нам стало немного понятнее, и мы можем просто сказать, что пользователь создал

35
00:02:37,440 --> 00:02:38,160
ошибка.

36
00:02:39,200 --> 00:02:40,320
Или создание пользователя?

37
00:02:40,340 --> 00:02:41,810
Давайте будем более грамматически правильными.

38
00:02:42,290 --> 00:02:45,560
Создание пользователя обнаружило ошибку и зарегистрирует ее.

39
00:02:47,430 --> 00:02:51,840
И этого нам достаточно, чтобы хотя бы начать и посмотреть, что происходит.

40
00:02:52,230 --> 00:02:56,460
Итак, давайте передадим наш дескриптор, отправьте его в наш обработчик on submit здесь.

41
00:02:59,510 --> 00:03:00,830
А теперь давайте сохраним это.

42
00:03:02,020 --> 00:03:04,390
И вернемся к нашему приложению.

43
00:03:05,700 --> 00:03:07,770
И давайте на самом деле попробуем.

44
00:03:08,550 --> 00:03:12,450
Итак, здесь я собираюсь сказать, что мое отображаемое имя — Майк.

45
00:03:12,720 --> 00:03:19,200
Моя электронная почта Майка в Gmail, и мой пароль один два три четыре один два три четыре один два три четыре

46
00:03:19,200 --> 00:03:19,980
один два три четыре.

47
00:03:20,820 --> 00:03:21,890
Так что я знаю, что записываю это.

48
00:03:21,900 --> 00:03:26,430
Обычно вы не хотите этого делать, но я просто записываю это для нашей собственной выгоды прямо сейчас.

49
00:03:26,970 --> 00:03:29,100
И если бы я подписался, давайте посмотрим, что произойдет.

50
00:03:29,730 --> 00:03:35,670
Мы возвращаем учетные данные пользователя, и внутри мы видим, что получаем пользовательский объект.

51
00:03:36,060 --> 00:03:38,040
И вот мы получаем токен доступа.

52
00:03:38,580 --> 00:03:44,220
Мы не передавали отображаемое имя, потому что на самом деле мы не сделали этого внутри нашего кода.

53
00:03:44,490 --> 00:03:46,530
Так что это очень ключевой момент, который я хочу, чтобы вы заметили.

54
00:03:47,010 --> 00:03:51,740
Отображаемое здесь имя не возвращается к нам внутри этого пользователя.

55
00:03:52,440 --> 00:03:53,190
Но как это могло быть?

56
00:03:53,490 --> 00:03:54,930
Мы только что создали этого пользователя.

57
00:03:55,170 --> 00:04:00,150
Итак, конечно, отображаемого имени нет, но причина, по которой этот пользовательский объект одинаков, заключается в том, что

58
00:04:00,510 --> 00:04:08,280
Firebase следит за тем, чтобы при всех различных способах аутентификации вы ожидали

59
00:04:08,280 --> 00:04:13,770
одна и та же форма, независимо от того, есть ли значение или нет, это полностью зависит от метода аутентификации

60
00:04:13,770 --> 00:04:14,160
сам.

61
00:04:14,610 --> 00:04:19,470
Причина, по которой для Google есть отображаемое имя, заключается в том, что в Google, когда вы настраиваете своего пользователя,

62
00:04:19,500 --> 00:04:21,150
вы должны сообщить Google, как вас зовут.

63
00:04:21,540 --> 00:04:26,070
В нашем конкретном случае мы не сделали этого в реальном методе аутентификации.

64
00:04:26,340 --> 00:04:32,160
Мы сделали это в нашей форме, но на самом деле мы не делаем этого в нашей аутентификации с ней, и нет никакого реального

65
00:04:32,160 --> 00:04:34,440
нужно в данном конкретном случае.

66
00:04:34,440 --> 00:04:39,150
Что мы собираемся сделать, так это то, что мы собираемся использовать это и хранить в нашей базе данных, поскольку

67
00:04:39,150 --> 00:04:39,360
что.

68
00:04:39,780 --> 00:04:45,840
Таким образом, это важное различие заключается в том, что теперь отображаемое имя не исходит из этого отображения пользовательского объекта.

69
00:04:45,840 --> 00:04:51,210
имя будет исходить из, ах, форма регистрации вместо этого.

70
00:04:51,960 --> 00:04:53,030
Итак, как мы собираемся это сделать?

71
00:04:54,200 --> 00:05:01,280
Итак, давайте вернемся в наше приложение, поскольку мы увидели, что возвращаем этого пользователя, и это хорошо.

72
00:05:01,430 --> 00:05:02,690
потому что мы хотим этого пользователя.

73
00:05:03,260 --> 00:05:10,790
Но что мы собираемся сделать с этим пользователем, так это то, что теперь нам нужно будет передать это значение, которое у нас есть,

74
00:05:10,790 --> 00:05:13,160
который является подтверждением электронной почты и пароля.

75
00:05:14,380 --> 00:05:17,500
В настоящий финал.

76
00:05:18,890 --> 00:05:22,700
Документ, который мы пытаемся сгенерировать, но давайте рассмотрим этот метод прямо сейчас.

77
00:05:23,300 --> 00:05:31,880
Наш метод делает вывод от этого пользователя по отображаемому имени, адресу электронной почты и объявлению, что они были просто

78
00:05:31,880 --> 00:05:39,480
предполагая, что это объект пользователя, потому что он был, когда мы зарегистрировались здесь.

79
00:05:39,500 --> 00:05:41,540
Мы больше не сможем этого делать.

80
00:05:42,260 --> 00:05:47,640
Поэтому, чтобы мы могли расширить эту функциональность, мы можем иногда получать это значение.

81
00:05:47,660 --> 00:05:49,160
Можем, иногда нет.

82
00:05:50,090 --> 00:05:56,570
Итак, что я собираюсь сделать, так это сказать, что, хорошо, в тех случаях, когда нет, давайте

83
00:05:56,570 --> 00:06:04,460
скажем, мы получаем некоторую дополнительную информацию, и эта дополнительная информация, которую я просто хочу сказать, является объектом.

84
00:06:05,270 --> 00:06:13,100
И что я сделаю, так это выложу этот объект в конце, после того, как все эти поля будут заполнены.

85
00:06:13,370 --> 00:06:16,340
из любой предыдущей настройки переменной, которую мы сделали.

86
00:06:17,090 --> 00:06:23,510
Таким образом, если отображаемое имя существует при использовании или отключении, оно будет распространяться, и мы не собираемся его передавать.

87
00:06:23,510 --> 00:06:28,910
любая дополнительная информация, означающая, что это, вероятно, по умолчанию будет просто пустым объектом,

88
00:06:28,910 --> 00:06:29,600
Например.

89
00:06:30,350 --> 00:06:35,600
Но скажем, в нашем текущем примере отображаемое имя здесь не имеет значения.

90
00:06:35,990 --> 00:06:37,250
Как мы видели, он был нулевым.

91
00:06:38,060 --> 00:06:40,940
Итак, что произойдет, так это то, что отображаемое имя будет установлено равным нулю.

92
00:06:41,480 --> 00:06:46,550
Но затем, поскольку мы собираемся сами добавить дополнительную информацию,

93
00:06:47,300 --> 00:06:54,200
то произойдет то, что вместо этого будет передано вот так, где у нас будет строка

94
00:06:54,230 --> 00:06:54,830
себя.

95
00:06:55,100 --> 00:06:57,230
Например, это будет Майк.

96
00:06:57,650 --> 00:07:03,290
И затем это перезапишет это нулевое значение, чтобы у нас действительно было окончательное отображаемое имя.

97
00:07:03,530 --> 00:07:05,330
внутри нашего пользовательского документа.

98
00:07:06,230 --> 00:07:15,410
И теперь мы можем просто сказать, что после того, как мы вернем этого пользователя с объекта, я хочу сейчас

99
00:07:15,410 --> 00:07:19,300
вызовите тот метод, который генерирует этого пользователя create.

100
00:07:20,330 --> 00:07:24,550
Итак, я хочу еще раз спросить, как называется метод?

101
00:07:24,560 --> 00:07:26,030
Создать пользовательский документ из офф.

102
00:07:28,630 --> 00:07:32,140
А здесь внизу, когда мы вернемся, я буду ждать.

103
00:07:33,150 --> 00:07:40,800
Создайте документ из офф, я собираюсь передать его пользователю, но я также собираюсь передать ему этот объект

104
00:07:41,100 --> 00:07:47,370
со значением отображаемого имени, которое, как мы ожидали, они должны заполнить внутри своей формы.

105
00:07:49,930 --> 00:07:55,990
А потом после этого, если это удастся, мы придумаем, что сделать, чтобы подтвердить им, что они

106
00:07:55,990 --> 00:07:59,860
успешно зарегистрировался, но пока этого достаточно для нашего поля формы.

107
00:08:00,400 --> 00:08:04,750
Единственное, что нам нужно сделать, это убедиться, что мы очистили поле регистрации.

108
00:08:05,350 --> 00:08:07,460
Но прежде чем мы это сделаем, давайте просто убедимся, что это работает.

109
00:08:07,480 --> 00:08:08,770
Давайте сделаем это шаг за шагом.

110
00:08:09,460 --> 00:08:16,510
Итак, у меня есть все тот же код, и теперь я собираюсь обновить его.

111
00:08:19,190 --> 00:08:20,540
И давайте просто продолжать печатать.

112
00:08:20,840 --> 00:08:30,590
Майк Майк на gmail.com один два три четыре один два три четыре один два три четыре один два три четыре.

113
00:08:31,310 --> 00:08:32,600
И если мы попадем, зарегистрируйтесь сейчас.

114
00:08:34,160 --> 00:08:40,580
О, мы видим, что мы получаем ошибку, мы видим, что мы получаем уже используемую электронную почту Air Firebase Air off.

115
00:08:41,450 --> 00:08:47,570
Так что это на самом деле очень полезно, потому что раньше, когда мы выходили из системы в первый раз,

116
00:08:47,930 --> 00:08:54,590
на самом деле он уже создал для нас пользователя для этого электронного письма, и Firebase не позволит вам сделать то же самое

117
00:08:54,860 --> 00:08:56,480
электронная почта для нескольких пользователей.

118
00:08:56,750 --> 00:09:03,380
Так что это действительно здорово для нас, потому что теперь мы можем зафиксировать эту ошибку и предупредить

119
00:09:03,380 --> 00:09:07,040
пользователю еще больше конкретики о том, почему произошла ошибка.

120
00:09:07,550 --> 00:09:13,520
Итак, что мы можем сделать, так это использовать код ошибки, и этот конкретный код ошибки был

121
00:09:13,520 --> 00:09:16,400
нерабочая электронная почта уже используется, Эрика.

122
00:09:17,000 --> 00:09:19,790
Таким образом, мы можем сказать, если код ошибки.

123
00:09:21,640 --> 00:09:23,380
Равен этому.

124
00:09:25,120 --> 00:09:33,640
Тогда что мы можем сделать, так это отменить или на самом деле предупредить их вместо этого, что они потерпели неудачу, потому что

125
00:09:33,640 --> 00:09:41,080
у них один и тот же адрес электронной почты, они не могут создать уже используемый адрес электронной почты пользователя.

126
00:09:42,090 --> 00:09:43,770
А теперь, если мы сохраним это.

127
00:09:45,120 --> 00:09:48,270
И мы можем сделать еще console.log этой ошибки.

128
00:09:50,490 --> 00:09:58,050
И теперь, если мы очистим консоль и снова зарегистрируемся, мы увидим, что получили правильное предупреждение.

129
00:09:58,830 --> 00:09:59,550
Так что это здорово.

130
00:10:00,420 --> 00:10:05,310
Сейчас мы добавили больше функциональности, и есть больше способов сделать это красивее, но

131
00:10:05,310 --> 00:10:06,420
мы поговорим об этом после.

132
00:10:07,020 --> 00:10:10,080
На данный момент мы хотим правильно создать этого пользователя.

133
00:10:10,680 --> 00:10:13,020
Итак, что мы можем сделать, так это удалить этого пользователя.

134
00:10:15,240 --> 00:10:22,140
Из нашей аутентификации, и если мы вернемся сейчас и попробуем снова зарегистрироваться, что произойдет?

135
00:10:23,910 --> 00:10:25,320
Сейчас, если мы вернемся сюда.

136
00:10:26,400 --> 00:10:27,240
Давайте обновим.

137
00:10:27,330 --> 00:10:28,320
Нам не хватило воздуха.

138
00:10:30,310 --> 00:10:37,180
Мы видим, что у нас есть этот пользователь, и внутри нашей базы данных, хранящейся в огне, мы видим, что у нас есть наш новый пользователь.

139
00:10:37,960 --> 00:10:38,320
Отлично.

140
00:10:38,350 --> 00:10:40,180
Так что все работает так, как ожидалось.

141
00:10:40,870 --> 00:10:47,440
Последнее, что нам нужно сделать, это после того, как мы успешно запустим это успешное творение.

142
00:10:47,440 --> 00:10:55,000
Мы хотим очистить эти поля, и мы можем сделать это, просто создав другой метод с именем reset.

143
00:10:55,090 --> 00:11:02,560
поля формы, которая будет просто функцией, вызывающей установленные поля формы с нашей формой по умолчанию.

144
00:11:02,560 --> 00:11:04,660
поля, которые являются пустыми состояниями.

145
00:11:05,860 --> 00:11:12,910
И затем давайте просто добавим это в конец после того, как мы успешно создали пользовательский документ из

146
00:11:12,910 --> 00:11:13,300
выкл.

147
00:11:14,520 --> 00:11:19,620
И теперь, если мы сохраним это, чтобы правильно это сделать, придется снова удалить пользователя.

148
00:11:20,130 --> 00:11:22,710
Так вот, позвольте мне просто войти сюда.

149
00:11:23,460 --> 00:11:24,990
Позвольте мне удалить обоих этих пользователей.

150
00:11:25,500 --> 00:11:30,330
Итак, я собираюсь удалить как документы, так и аутентификацию, потому что у нас будет

151
00:11:30,330 --> 00:11:31,740
пройти этот шаг еще раз.

152
00:11:32,670 --> 00:11:34,350
На самом деле, я мог просто создать другого пользователя.

153
00:11:34,470 --> 00:11:35,700
Я даже не знаю, зачем я это делаю.

154
00:11:35,940 --> 00:11:38,880
Это действительно просто немного задним числом в моем конце.

155
00:11:39,570 --> 00:11:40,650
Но давайте обновимся.

156
00:11:42,680 --> 00:11:49,580
И давайте просто убедимся, что все работает как на gmail.com раз два три четыре один два три

157
00:11:49,580 --> 00:11:52,130
четыре один два три четыре один два три четыре.

158
00:11:52,760 --> 00:11:53,450
Нажми на регистрацию.

159
00:11:54,720 --> 00:12:00,480
Мы видим, что наше поле успешно зачищено, значит, мы, вероятно, успешно создали нашу

160
00:12:00,480 --> 00:12:07,020
пользователя, поэтому, если мы обновим, мы увидим нашего пользователя, а внутри нашей базы данных мы также увидим, что мы сгенерировали

161
00:12:07,020 --> 00:12:08,250
пользователь успешно.

162
00:12:09,450 --> 00:12:10,650
Так что здесь все работает.

163
00:12:11,100 --> 00:12:13,710
Итак, наш код работает так, как мы ожидаем.

164
00:12:13,870 --> 00:12:18,600
Теперь мы правильно интегрировали регистрацию с использованием этого пароля электронной почты.

165
00:12:19,860 --> 00:12:26,190
Итак, теперь, когда у нас есть это, давайте закончим стилизацию нашей регистрации, а затем что мы можем сделать, так это понять

166
00:12:26,190 --> 00:12:31,560
выяснить, можем ли мы успешно войти в систему с этим новым пользователем пароля электронной почты, прошедшим проверку подлинности.

167
00:12:31,800 --> 00:12:32,820
Так что увидимся в следующем видео.