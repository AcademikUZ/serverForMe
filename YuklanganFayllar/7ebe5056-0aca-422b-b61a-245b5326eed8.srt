1
00:00:00,860 --> 00:00:01,910
С возвращением, все.

2
00:00:02,940 --> 00:00:06,390
Итак, давайте вытащим внутреннее приложение Firebase.

3
00:00:07,200 --> 00:00:12,270
Однако первое, о чем я хочу, чтобы вы подумали, это тот факт, что мы будем взаимодействовать

4
00:00:12,270 --> 00:00:14,430
с этим новым API.

5
00:00:14,910 --> 00:00:17,940
API в данном конкретном случае будет Firebase.

6
00:00:18,480 --> 00:00:21,180
Теперь у Firebase очень специфический способ ведения дел.

7
00:00:21,510 --> 00:00:26,820
Итак, что мы хотим сделать, так это подумать о том, как мы можем абстрагироваться от этого как можно лучше.

8
00:00:27,390 --> 00:00:33,240
И вообще говоря, самый простой способ сделать это — попытаться сохранить все, что вы пишете, когда

9
00:00:33,240 --> 00:00:39,840
дело доходит до взаимодействия с каким-то бэкэнд-API, который может иметь определенные нюансы.

10
00:00:40,080 --> 00:00:44,880
внутри своей папки и внутри своего файла в этой папке.

11
00:00:45,240 --> 00:00:48,360
Итак, в данном конкретном случае я могу сделать это внутри исходного кода.

12
00:00:48,360 --> 00:00:51,180
Я хочу создать новую папку и назову ее utils.

13
00:00:51,600 --> 00:00:54,210
Это будет содержать служебные файлы.

14
00:00:54,570 --> 00:00:58,050
И тот, который я хочу сделать, это служебный файл Firebase.

15
00:00:58,060 --> 00:01:03,300
Итак, я собираюсь создать папку Firebase и внутри firebase создать утилиты Firebase dart,

16
00:01:03,300 --> 00:01:04,080
герцогиня.

17
00:01:05,230 --> 00:01:11,860
Итак, это просто JavaScript, мы, скорее всего, не собираемся возвращать GSX из этого, потому что это

18
00:01:11,860 --> 00:01:14,590
библиотека предназначена только для использования Firebase.

19
00:01:15,010 --> 00:01:18,550
Я собираюсь связать вам документы с Firebase, когда мы это делаем, чтобы вы могли следить за ними.

20
00:01:18,700 --> 00:01:19,840
Но я не собираюсь лгать тебе.

21
00:01:19,840 --> 00:01:23,680
Документацию Firebase трудно читать.

22
00:01:24,130 --> 00:01:25,330
Это очень технично.

23
00:01:25,330 --> 00:01:31,240
Судя по всей документации Google, я действительно считаю, что Google пишет немного запутанную документацию,

24
00:01:31,240 --> 00:01:35,140
иногда очень тщательно, но иногда немного трудно начать.

25
00:01:35,970 --> 00:01:37,470
Но по существу, что мы собираемся делать.

26
00:01:38,660 --> 00:01:45,560
Внутри этой папки с утилитой установлено все, что нам нужно для начала работы, поэтому для того, чтобы вы могли использовать

27
00:01:45,560 --> 00:01:49,700
Firebase, вам действительно нужно импортировать из Firebase.

28
00:01:51,560 --> 00:01:55,130
А потом, слэш, что ты хочешь втянуть?

29
00:01:55,610 --> 00:01:58,340
Итак, Firebase, как я уже говорил, представляет собой набор инструментов.

30
00:01:58,580 --> 00:02:00,950
Firestar — один из инструментов внутри.

31
00:02:01,400 --> 00:02:06,830
Так что этот комплект, тем не менее, вы достаете из библиотеки как вещь, называемую приложением.

32
00:02:07,040 --> 00:02:11,600
Таким образом, этот тип захватывает все, что необходимо для запуска Firebase, в том числе его внутренние

33
00:02:11,600 --> 00:02:12,200
Сервисы.

34
00:02:12,860 --> 00:02:16,460
Итак, чтобы вы его получили, вам нужна функция Initialize app.

35
00:02:16,760 --> 00:02:24,230
Эта функция инициализации приложения создает для вас экземпляр приложения на основе некоторого типа конфигурации, который

36
00:02:24,230 --> 00:02:25,730
мы поговорим прямо сейчас.

37
00:02:26,420 --> 00:02:34,610
Эта конфигурация представляет собой объект, который позволяет нам прикрепить этот экземпляр приложения Firebase к тому экземпляру, который мы

38
00:02:34,610 --> 00:02:37,400
есть онлайн, потому что прямо сейчас у нас установлена ​​​​библиотека.

39
00:02:37,580 --> 00:02:43,220
Но мы не можем сказать Firebase, что этот экземпляр, который вы используете, должен ссылаться

40
00:02:43,220 --> 00:02:46,400
на тот, который вы создали в консоли Firebase.

41
00:02:46,760 --> 00:02:48,320
Конкретно вот этот.

42
00:02:48,830 --> 00:02:49,850
Итак, как мы это сделаем?

43
00:02:50,360 --> 00:02:56,150
Ну, то, что вы хотите сделать, находится внутри домашней страницы, вы хотите щелкнуть вот эту маленькую часть,

44
00:02:56,150 --> 00:03:00,320
говорит Веб, потому что есть разные способы добавить свое приложение в Firebase.

45
00:03:00,560 --> 00:03:02,480
Поэтому Firebase нуждается в вас, чтобы подтвердить, как это сделать.

46
00:03:02,990 --> 00:03:08,450
Теперь мы хотим зарегистрировать веб-приложение, поэтому я просто назову это веб-приложением Crown Clothing.

47
00:03:08,450 --> 00:03:09,340
потому что я знаю наше здание.

48
00:03:09,350 --> 00:03:10,550
Это наше веб-приложение React.

49
00:03:11,300 --> 00:03:12,380
Мы не занимаемся хостингом.

50
00:03:12,590 --> 00:03:13,460
Это даже не имеет значения.

51
00:03:14,060 --> 00:03:16,400
Но вот теперь просто нажмите Зарегистрировать приложение.

52
00:03:17,330 --> 00:03:21,500
И что это сделает сейчас, так это сгенерирует для нас пакет.

53
00:03:22,040 --> 00:03:25,220
Итак, это сбои, когда вы видите, что npm устанавливает Firebase.

54
00:03:25,370 --> 00:03:26,060
Мы уже сделали это.

55
00:03:26,330 --> 00:03:29,270
Мы установили Firebase в наше приложение.

56
00:03:29,840 --> 00:03:33,230
Что нам действительно нужно, так это конфигурация Firebase.

57
00:03:33,740 --> 00:03:35,420
Итак, я хочу, чтобы вы скопировали это.

58
00:03:35,600 --> 00:03:39,740
И даже если вы посмотрите эту строку, скопируйте ее, потому что мы собираемся сделать это, потому что мы уже импортировали

59
00:03:39,740 --> 00:03:40,640
приложение Инициализировать.

60
00:03:41,920 --> 00:03:43,990
Так вот, когда вы вставляете это.

61
00:03:45,260 --> 00:03:50,310
В конечном итоге вы передаете это функции приложения Initialise, которую мы получаем из приложения Firebase.

62
00:03:50,840 --> 00:03:58,000
Что делает эта конфигурация, так это идентифицирует этот SDK, который, по сути, является комплектом разработчика, который мы используем.

63
00:03:58,010 --> 00:04:04,670
Итак, сама библиотека, эта библиотека — просто библиотека JavaScript, которая абстрагирует часть

64
00:04:04,670 --> 00:04:09,230
функциональность, которую нам нужно использовать для взаимодействия с нашим экземпляром Firebase.

65
00:04:09,500 --> 00:04:14,150
Итак, те грубые действия, о которых я рассказывал вам о создании, чтении, обновлении, хранении, аутентификации

66
00:04:14,150 --> 00:04:19,940
все эти вещи будут происходить с использованием этого экземпляра приложения Firebase.

67
00:04:20,480 --> 00:04:24,680
Итак, здесь я собираюсь сделать это более ясным, сказав и назвав это приложение Firebase.

68
00:04:25,130 --> 00:04:26,960
Таким образом, приложение Initialize принимает конфигурацию.

69
00:04:27,440 --> 00:04:35,570
Это похоже на то, что эта конфигурация говорит мне, что это конкретный экземпляр базы данных одежды Crown, который является

70
00:04:35,570 --> 00:04:39,440
Экземпляр Firebase, который мы сделали несколько видео назад.

71
00:04:40,430 --> 00:04:44,270
Буквально, этот экземпляр, который мы рассматриваем прямо здесь, в консоли, прямо здесь.

72
00:04:44,510 --> 00:04:50,270
Это экземпляр этого уникального идентификатора, как я упоминал ранее, мы видим его прямо здесь.

73
00:04:50,300 --> 00:04:51,230
Это идея проекта.

74
00:04:52,010 --> 00:04:53,270
Теперь, если вам интересно.

75
00:04:53,930 --> 00:05:00,350
Как правило, говоря о ключах API, разве мы не должны раскрывать наши ключи API в Firebase?

76
00:05:00,350 --> 00:05:04,310
К сожалению или к счастью, это не та же картина.

77
00:05:04,610 --> 00:05:09,590
Firebase нужен этот ключ API, и это не какой-то сверхсекретный ключ API, о котором вам нужно беспокоиться.

78
00:05:10,250 --> 00:05:14,390
На самом деле это также явно указано в их документации, так что не беспокойтесь об этом,

79
00:05:14,390 --> 00:05:16,160
но нужен свой конфиг.

80
00:05:16,730 --> 00:05:23,350
Ваша собственная конфигурация позволит вам выполнять действия Firebase, создавать действия для сохранения,

81
00:05:23,360 --> 00:05:28,790
прочитайте, обновите все эти вещи до своего конкретного экземпляра Firebase.

82
00:05:29,690 --> 00:05:36,320
Итак, теперь, когда мы настроили Firebase, следующее, что нам нужно сделать, это фактически настроить

83
00:05:36,320 --> 00:05:37,190
аутентификация.

84
00:05:38,110 --> 00:05:45,220
Теперь, как я упоминал в Firebase, он включает в себя кучу различных пакетов библиотек для нас, когда

85
00:05:45,220 --> 00:05:46,220
мы устанавливаем Firebase.

86
00:05:46,240 --> 00:05:50,440
Это была не одна библиотека, это была куча маленьких микробиблиотек.

87
00:05:51,190 --> 00:05:57,430
Один из них связан с аутентификацией, и это относится к аутентификации с косой чертой Firebase.

88
00:05:58,840 --> 00:06:05,770
Так что это в значительной степени выходной, и что нам нужно отсюда, так это то, что нам нужно выйти, потому что так же, как

89
00:06:06,250 --> 00:06:09,430
инициализированное приложение, мы также должны создать четвертый экземпляр.

90
00:06:10,330 --> 00:06:13,270
Нам также нужно войти в систему с перенаправлением.

91
00:06:14,050 --> 00:06:15,970
Теперь есть пара.

92
00:06:16,120 --> 00:06:20,830
Итак, вход с перенаправлением и их вход с всплывающим окном, давайте возьмем оба, потому что я хочу поговорить

93
00:06:20,830 --> 00:06:21,250
об обоих.

94
00:06:22,990 --> 00:06:25,330
Еще нам нужен провайдер Google Auth.

95
00:06:25,780 --> 00:06:28,630
Так что это все пространство имен специально от Firebase.

96
00:06:29,050 --> 00:06:32,380
Именно с их помощью удалось создать нашу учетную запись Google.

97
00:06:32,830 --> 00:06:37,480
Мы можем либо войти в систему, используя всплывающее окно, либо мы можем войти, разрешив нашему приложению перенаправлять, и мы

98
00:06:37,480 --> 00:06:38,140
пройти через оба.

99
00:06:38,410 --> 00:06:40,900
Это просто очень специфичная настройка для Firebase.

100
00:06:41,590 --> 00:06:44,320
Вы можете найти все это снова в документах, на которые я дам ссылку.

101
00:06:45,160 --> 00:06:52,060
Итак, чтобы использовать эту аутентификацию Google, нам нужно сначала инициализировать провайдера, используя этот Google.

102
00:06:52,090 --> 00:06:54,580
Класс провайдера Земли, который мы получили.

103
00:06:55,090 --> 00:07:01,060
Итак, здесь вы хотите позвонить новому провайдеру Google Earth, который, в свою очередь, вернет вам этого провайдера.

104
00:07:01,060 --> 00:07:01,690
пример.

105
00:07:02,380 --> 00:07:05,950
Затем мы захотим сделать, если мы хотим вызвать набор пользовательских параметров.

106
00:07:06,490 --> 00:07:09,940
Таким образом, эти пользовательские параметры будут принимать какой-то объект конфигурации.

107
00:07:10,270 --> 00:07:15,880
И с его помощью мы можем указать разные способы поведения этого провайдера Google Auth.

108
00:07:16,480 --> 00:07:21,100
Так что, вообще говоря, главное, чего мы хотим, — это просто подсказка.

109
00:07:22,760 --> 00:07:26,000
Какой будет выбрана учетная запись подчеркивания.

110
00:07:26,810 --> 00:07:32,930
Итак, это означает, что каждый раз, когда кто-то взаимодействует с нашим провайдером, мы всегда хотим

111
00:07:32,930 --> 00:07:34,520
их, чтобы выбрать учетную запись.

112
00:07:34,790 --> 00:07:37,670
Я расскажу больше об этом, как только мы его настроим, и о том, что делает эта деталь.

113
00:07:37,970 --> 00:07:44,240
Так что на самом деле эти пользовательские параметры предназначены в первую очередь для поставщиков аутентификации Google, что является специфическим

114
00:07:44,240 --> 00:07:45,770
к собственному интерфейсу Google.

115
00:07:46,070 --> 00:07:49,820
Опять же, это просто некоторая конкретная конфигурация, которую хочет Google.

116
00:07:50,090 --> 00:07:55,550
На самом деле весь этот файл, который мы настраиваем, просто уникален для разных типов конфигурации.

117
00:07:55,550 --> 00:07:57,950
стили, которые Google, в частности, хочет от нас.

118
00:07:58,280 --> 00:08:02,000
Так что здесь не так много логики, чтобы действительно учиться на высоком уровне.

119
00:08:02,030 --> 00:08:05,870
Вам просто нужно узнать, что они хотят от инструментов, и эти инструменты могут немного измениться.

120
00:08:05,870 --> 00:08:06,560
немного тут и там.

121
00:08:06,890 --> 00:08:09,500
И, честно говоря, это действительно все, что нужно.

122
00:08:10,190 --> 00:08:15,740
Еще одна вещь, которую нам нужно сделать, это экспортировать нашу аутентификацию, которую, как я уже упоминал, мы

123
00:08:15,740 --> 00:08:17,030
необходимо создать экземпляр.

124
00:08:17,690 --> 00:08:20,480
И тогда нам также нужно экспортировать.

125
00:08:20,480 --> 00:08:24,080
И теперь этот вход с всплывающим окном.

126
00:08:24,560 --> 00:08:28,670
Итак, здесь я хочу вызвать его, войдите в систему с помощью всплывающего окна Google.

127
00:08:29,950 --> 00:08:35,650
И это будет равнозначно возврату анонимной функции.

128
00:08:35,860 --> 00:08:40,750
Так что помните, никаких волнистых скобок, нам нужен вход в систему с всплывающим окном.

129
00:08:41,500 --> 00:08:45,250
А то, что мы хотим передать на это выключено и у провайдера.

130
00:08:45,940 --> 00:08:50,980
Таким образом, экземпляр провайдера, который мы создали, а также четвертый экземпляр, который мы создали, мы хотим

131
00:08:50,980 --> 00:08:53,350
передать оба из них, чтобы зарегистрироваться с всплывающим окном.

132
00:08:53,920 --> 00:08:58,810
Теперь вам может быть интересно, почему Auth является просто вызовом функции без нового ключевого слова, тогда как

133
00:08:58,810 --> 00:09:00,130
Гугл офф провайдер один?

134
00:09:00,640 --> 00:09:06,970
Таким образом, провайдер Google Auth — это, по сути, класс, который мы получаем от аутентификации Firebase, и это

135
00:09:06,970 --> 00:09:08,920
подключен к самому Google Auth.

136
00:09:09,310 --> 00:09:11,300
У Auth есть много разных реализаций.

137
00:09:11,320 --> 00:09:13,450
Это просто зона аутентификации Firebase.

138
00:09:13,660 --> 00:09:19,030
Итак, это класс, и иногда вы хотите сгенерировать несколько таких разных провайдеров, потому что

139
00:09:19,240 --> 00:09:22,060
у вас могут быть разные экземпляры провайдера, выполняющие разные действия.

140
00:09:22,300 --> 00:09:28,180
Например, как мы видим при входе с всплывающим провайдером, вы передаете ему провайдера, может быть, для входа

141
00:09:28,180 --> 00:09:30,160
с перенаправлением вы передаете другого провайдера.

142
00:09:30,430 --> 00:09:35,500
Эти провайдеры являются своего рода инструкциями для этого экземпляра провайдера, но вы можете иметь несколько

143
00:09:35,500 --> 00:09:38,320
аутентификация разных провайдеров.

144
00:09:38,320 --> 00:09:43,390
С другой стороны, однозначный смысл заключается в том, что способ аутентификации вашего приложения и

145
00:09:43,390 --> 00:09:49,420
правила аутентификации и аутентификации, которая взаимодействует с Firebase, это всегда должно

146
00:09:49,420 --> 00:09:51,490
быть одним и тем же для каждого приложения.

147
00:09:51,880 --> 00:09:55,230
Зачем вам разные службы аутентификации для какого приложения?

148
00:09:55,240 --> 00:09:56,260
Это не имеет смысла, верно?

149
00:09:56,500 --> 00:10:02,860
После того, как вы пройдете аутентификацию для этого веб-сайта в целом, его следует сохранить на протяжении всего жизненного цикла.

150
00:10:02,860 --> 00:10:03,970
этого приложения.

151
00:10:04,300 --> 00:10:09,130
Вам никогда не понадобится более одной аутентификации, тогда как вам может понадобиться несколько провайдеров.

152
00:10:09,310 --> 00:10:13,930
потому что у вас могут быть разные кнопки, которые запускают разные формы даже Google.

153
00:10:13,930 --> 00:10:14,950
Войти через всплывающее окно.

154
00:10:15,280 --> 00:10:18,640
Возможно, некоторые из них предлагают вам выбрать учетную запись, а некоторые нет.

155
00:10:18,820 --> 00:10:22,120
Вы можете себе представить, что существуют разные случаи и варианты использования для этих двух.

156
00:10:22,870 --> 00:10:26,350
Но, по сути, теперь, когда мы настроили то, что мы хотим сделать сейчас.

157
00:10:27,560 --> 00:10:33,470
Хотим ли мы использовать это, поэтому для того, чтобы мы действительно использовали это хорошо, нам нужно сделать то, что нам нужно

158
00:10:33,470 --> 00:10:37,100
чтобы вернуться к нашему приложению, и нам нужно перейти в консоль Google.

159
00:10:37,490 --> 00:10:43,160
Теперь вам нужно перейти на вкладку аутентификации слева здесь, а затем в

160
00:10:43,160 --> 00:10:45,110
сверху здесь вы хотите перейти к методу входа.

161
00:10:46,030 --> 00:10:50,950
Ну, мы хотим сделать, мы хотим щелкнуть Google, потому что мы хотим предоставить возможность теперь подписать

162
00:10:50,950 --> 00:10:51,550
в с Гугл.

163
00:10:52,420 --> 00:10:55,270
На данный момент нам не нужно беспокоиться ни о каких других настройках.

164
00:10:55,300 --> 00:10:58,300
Мы поговорим об этом домене, когда он станет важным на данный момент.

165
00:10:58,540 --> 00:11:03,490
Все, что вам нужно знать, это то, что localhost авторизован по умолчанию, а это означает, что это список любых

166
00:11:03,490 --> 00:11:07,090
домены, которые мы разрешили использовать нашему приложению.

167
00:11:07,090 --> 00:11:07,780
Гугл подпишите.

168
00:11:08,110 --> 00:11:11,740
Сейчас мы тестируем наш локальный хост, поэтому по умолчанию он включен.

169
00:11:11,800 --> 00:11:12,400
Это все, что нам нужно.

170
00:11:12,430 --> 00:11:16,360
Мы не касаемся этого здесь, хотя нам нужно включить эту подпись.

171
00:11:16,810 --> 00:11:21,820
А затем для электронной почты поддержки проекта просто выберите электронную почту, которую вы хотите пересылать

172
00:11:21,820 --> 00:11:26,500
все электронные письма поддержки для этой аутентификации в этом списке.

173
00:11:26,860 --> 00:11:28,240
Так вот это мой аккаунт.

174
00:11:28,570 --> 00:11:29,770
И тогда вы просто нажимаете сохранить.

175
00:11:32,100 --> 00:11:33,060
И это все, что нужно.

176
00:11:33,570 --> 00:11:36,450
Теперь у вас должен быть доступ, он включен.

177
00:11:37,230 --> 00:11:38,700
Итак, вернемся к нашему приложению.

178
00:11:39,450 --> 00:11:42,180
Мы настроили этот файл, так что теперь нам действительно нужно его использовать.

179
00:11:42,780 --> 00:11:44,490
Итак, давайте перейдем к нашему знаку и компоненту.

180
00:11:45,020 --> 00:11:47,550
Мы собираемся сделать то, что мы собираемся импортировать.

181
00:11:48,720 --> 00:11:51,870
Из наших утилит Firebase.

182
00:11:52,590 --> 00:11:59,250
Итак, перейдите в папку с утилитами, Firebase, Firebase utils, и мы хотим ввести наш вход с помощью Google.

183
00:11:59,250 --> 00:12:00,060
всплывающий метод.

184
00:12:01,270 --> 00:12:10,860
Что мы собираемся сделать, так это просто создать журнал пользователя Google, который является асинхронной функцией.

185
00:12:11,870 --> 00:12:18,350
Потому что помните, всякий раз, когда вы делаете вызов какой-либо базе данных, это будет асинхронно.

186
00:12:19,040 --> 00:12:21,920
Итак, мы хотим получить значение здесь.

187
00:12:22,880 --> 00:12:29,630
Ожидая вызова нашего входа в систему с помощью всплывающего окна Google, а затем мы просто хотим, чтобы консоль Dot зарегистрировала ответ.

188
00:12:30,650 --> 00:12:31,970
А потом сюда.

189
00:12:32,960 --> 00:12:34,130
Будем делать кнопку.

190
00:12:35,250 --> 00:12:38,970
И внутри этой кнопки появится всплывающее окно «Войти через Google».

191
00:12:40,120 --> 00:12:46,300
Затем мы настроим метод on click, чтобы он использовал наш журнал.

192
00:12:46,450 --> 00:12:48,040
Google использует наш метод.

193
00:12:48,730 --> 00:12:52,240
Итак, если мы сохраним это и теперь вернемся к нашему приложению.

194
00:12:54,360 --> 00:12:59,670
Что мы собираемся сделать, так это щелкнуть этот вход с помощью метода всплывающего окна Google, когда мы нажмем

195
00:12:59,670 --> 00:13:05,880
это уведомление о том, что оно открывает всплывающую подсказку Google, я щелкнул по электронной почте, которая у меня есть здесь.

196
00:13:06,790 --> 00:13:07,480
И сейчас.

197
00:13:08,690 --> 00:13:16,760
Мы видим, что мы возвращаем наши учетные данные пользователя, и внутри этих объектов вы увидите, что под

198
00:13:17,240 --> 00:13:19,520
свойства, вы получили токен доступа.

199
00:13:20,160 --> 00:13:25,640
Помните ранее в предыдущем уроке, когда я показывал вам диаграмму того, как наше приложение общается

200
00:13:25,640 --> 00:13:27,500
с Firebase, который общается с Google?

201
00:13:27,680 --> 00:13:34,460
И, наконец, вся цель состоит в том, чтобы получить этот токен доступа, с помощью которого мы затем можем создавать кредитные запросы.

202
00:13:34,820 --> 00:13:36,350
Это токен доступа.

203
00:13:36,620 --> 00:13:41,450
Итак, только что, после того как мы вызвали знак, он прошел через тот поток, который я вам оправдываю.

204
00:13:41,660 --> 00:13:44,480
И, наконец, Firebase возвращает нам токен доступа.

205
00:13:44,690 --> 00:13:47,300
Так что теперь мы можем делать наши кредитные запросы.

206
00:13:48,110 --> 00:13:54,890
Это много настроек, которые нам пришлось сделать для Firebase, как внутри нашего экземпляра Firebase, но затем

207
00:13:54,890 --> 00:13:56,980
также внутри нашего файла Firebase Utils.

208
00:13:57,290 --> 00:14:00,440
Я знаю, что мы прыгали вокруг, и мы потратили очень много времени на создание этого видео.

209
00:14:00,830 --> 00:14:05,840
Это видео — очень длинный урок, но, честно говоря, он просто для того, чтобы пройти через множество настроек и

210
00:14:05,840 --> 00:14:08,120
есть много разных конфигураций и разных вещей.

211
00:14:08,120 --> 00:14:09,170
Мы должны узнать об этом.

212
00:14:09,440 --> 00:14:11,210
Так что спасибо, что остаетесь со мной на этот раз.

213
00:14:11,540 --> 00:14:15,860
Но теперь у нас практически настроен наш метод входа в систему.

214
00:14:16,310 --> 00:14:22,490
Итак, в следующем видео мы узнаем, как мы можем использовать это, чтобы действительно начать

215
00:14:22,490 --> 00:14:24,290
построение аутентификации.

216
00:14:24,530 --> 00:14:26,600
Теперь мы также собираемся продолжить работу с Firebase.

217
00:14:27,170 --> 00:14:33,440
Итак, присоединяйтесь ко мне на следующем уроке, где мы перейдем от понимания того, что делать сейчас с этим аутентифицированным

218
00:14:33,440 --> 00:14:33,770
пользователь.