1
00:00:00,610 --> 00:00:01,720
С возвращением, все.

2
00:00:02,590 --> 00:00:08,110
В последнем видео мы узнали о том, как использовать этот новый шаблон, от вас, где мы создаем

3
00:00:08,110 --> 00:00:14,830
какой-то объект, который позволяет нам отслеживать несколько полей внутри нашей формы из-за того, что

4
00:00:14,830 --> 00:00:18,640
было совпадение между именем и значением, которое мы сгенерировали.

5
00:00:18,820 --> 00:00:25,930
Мы смогли создать этот простой и простой сокращенный метод хранения и установки этого юниформ-объекта.

6
00:00:26,080 --> 00:00:27,310
что у нас было в нашей форме.

7
00:00:27,820 --> 00:00:32,950
В этом видео мы собираемся использовать это поле формы для фактической аутентификации.

8
00:00:32,950 --> 00:00:35,350
наш пользователь с его электронной почтой и паролем.

9
00:00:36,130 --> 00:00:42,940
Итак, я хочу, чтобы вы заметили одну вещь: здесь мы сохраняем те же самые значения, которые, как мы знаем, нам нужны для

10
00:00:42,940 --> 00:00:44,170
наше создание.

11
00:00:45,340 --> 00:00:47,290
Пользовательский документ из метода аутентификации.

12
00:00:47,800 --> 00:00:54,070
Этот пользователь, как мы знаем, задает отображаемое имя и адрес электронной почты, а созданное объявление генерируется внутри,

13
00:00:54,280 --> 00:01:00,670
но прежде всего то, что нужно передать, это отображение, имя и адрес электронной почты для нас здесь, внутри нашего

14
00:01:00,670 --> 00:01:01,390
новое подписание.

15
00:01:01,660 --> 00:01:04,660
То, что нам нужно, очень похоже.

16
00:01:04,900 --> 00:01:07,240
Нам нужно отображаемое имя, нам нужен адрес электронной почты.

17
00:01:07,390 --> 00:01:09,370
Но теперь с паролем, подтвержденным паролем.

18
00:01:09,640 --> 00:01:13,960
Здесь следует помнить, что на самом деле мы не хотим хранить их внутри нашей базы данных.

19
00:01:14,260 --> 00:01:16,090
Это считается конфиденциальной информацией.

20
00:01:16,600 --> 00:01:21,370
Вместо этого мы хотим использовать аутентификацию Firebase, которая выявит

21
00:01:21,370 --> 00:01:23,770
совпадает ли пароль с пользователем.

22
00:01:23,950 --> 00:01:30,430
Но они скрывают это от нас, так что даже если каким-то образом взломают нашу базу данных или пожар,

23
00:01:30,820 --> 00:01:34,180
наши пароли не утекают, и для нас это не проблема безопасности.

24
00:01:34,420 --> 00:01:37,450
Так что это отличная функциональность Firestorm.

25
00:01:38,640 --> 00:01:44,370
Теперь мы хотим использовать все эти поля формы по умолчанию, которые мы настроили и

26
00:01:44,370 --> 00:01:51,150
на самом деле аутентифицировать пользователя, что означает, что нам нужно будет использовать новые утилиты внутри

27
00:01:51,150 --> 00:01:52,200
наши утилиты firebase.

28
00:01:52,950 --> 00:02:00,480
Итак, как мы видели ранее, когда мы использовали Firebase off, мы ввели вход с перенаправлением и

29
00:02:00,480 --> 00:02:02,010
войти с помощью всплывающих методов.

30
00:02:02,430 --> 00:02:08,190
Эти методы брали какого-то конкретного провайдера, который сообщал нам, какого внешнего провайдера мы пытаемся подписать.

31
00:02:08,190 --> 00:02:08,730
в с.

32
00:02:08,970 --> 00:02:09,960
Возможно, это был Facebook.

33
00:02:10,170 --> 00:02:15,060
Может быть, это был Google, на самом деле это был Google для нас, но, может быть, это мог быть GitHub или что-то в этом роде.

34
00:02:15,060 --> 00:02:16,860
другие варианты здесь.

35
00:02:16,980 --> 00:02:24,090
Когда вы заглянете внутрь своей реальной консоли и посмотрите на знак и методы, когда мы добавили провайдера.

36
00:02:24,300 --> 00:02:29,370
Они считаются нативными поставщиками, а это означает, что нам на самом деле не нужно предоставлять поставщика.

37
00:02:29,490 --> 00:02:32,070
Они поставляются по умолчанию с отключенным Firebase.

38
00:02:32,550 --> 00:02:37,350
Итак, все, что нам нужно, — это не еще один экземпляр провайдера, а нам нужен только метод.

39
00:02:38,380 --> 00:02:43,930
Теперь этот метод, который мы собираемся импортировать, на самом деле метко назван созданием пользователя с адресом электронной почты и паролем.

40
00:02:44,440 --> 00:02:45,790
И позвольте мне показать вам, как его использовать.

41
00:02:45,880 --> 00:02:46,720
Это довольно просто.

42
00:02:47,470 --> 00:02:50,590
Прежде всего, мы хотим сделать, мы хотим создать еще одну функцию.

43
00:02:50,890 --> 00:02:56,590
И я хочу назвать это чем-то явным, например создать пользователя с адресом электронной почты и паролем, потому что, как

44
00:02:56,590 --> 00:03:03,550
мы знаем, что мы делаем аутентифицированного пользователя на нашей вкладке Firebase Authentication.

45
00:03:04,210 --> 00:03:09,190
Это не обязательно пользовательский документ внутри экземпляра нашего пожарного хранилища.

46
00:03:09,580 --> 00:03:12,880
Итак, здесь я более подробно говорю о том, что будет делать эта функция.

47
00:03:13,240 --> 00:03:18,520
Это будет асинхронная функция, потому что мы будем синхронно устанавливать некоторые значения внутри

48
00:03:18,520 --> 00:03:19,150
пожарная база.

49
00:03:19,900 --> 00:03:27,340
И здесь я хочу, чтобы вы заметили, что я обычно создаю эти методы внутри этого служебного файла.

50
00:03:27,640 --> 00:03:35,140
И причина, по которой я это делаю, заключается в том, что это позволяет мне контролировать большую часть того, как работает мое приложение.

51
00:03:35,140 --> 00:03:37,900
интерфейсы с этой внешней службой.

52
00:03:38,440 --> 00:03:44,830
В данном конкретном случае внешней службой является Firebase, Firestar или какая-либо другая внутренняя служба.

53
00:03:44,830 --> 00:03:46,090
Firebase, с которым я работаю.

54
00:03:46,720 --> 00:03:52,060
Причина, по которой я это делаю, заключается в том, что это позволяет мне создать разделительный слой между интерфейсом

55
00:03:52,060 --> 00:03:54,250
а также услуги, на которые он опирается.

56
00:03:54,670 --> 00:03:59,380
Допустим, например, Google Firebase решила изменить некоторые из этих методов.

57
00:03:59,830 --> 00:04:04,030
Теперь происходит то, что внезапно мое приложение может начать ломаться без моего ведома.

58
00:04:04,450 --> 00:04:13,480
Однако, если я более четко определил, где мой код будет напрямую взаимодействовать с базовым

59
00:04:13,480 --> 00:04:13,910
оказание услуг.

60
00:04:13,930 --> 00:04:17,830
Так что в данном конкретном случае, создание пользовательских документов из офф, возьмем этот пример.

61
00:04:18,640 --> 00:04:23,100
Что произойдет, если способ получения этих документов изменится?

62
00:04:23,410 --> 00:04:28,120
Допустим, они меняют методологию получения документов способом, которым мы извлекаем данные,

63
00:04:28,270 --> 00:04:33,510
способ, которым мы определяем, существуют ли некоторые данные или, возможно, даже ссылка, или нет.

64
00:04:33,520 --> 00:04:35,020
Допустим, все это меняется.

65
00:04:35,440 --> 00:04:41,530
Означает ли это, что нам нужно провести рефакторинг везде внутри нашего приложения, которое теперь использует Firebase?

66
00:04:41,530 --> 00:04:44,200
как удостовериться и создать эти документы?

67
00:04:44,770 --> 00:04:50,230
Нет, потому что теперь мы можем просто изменить это в одном месте, и есть одно место, где я могу понять, как

68
00:04:50,230 --> 00:04:56,110
это то, что Firebase хочет, чтобы я теперь аутентифицировался по-новому и просто модифицировал в одном месте, даже если

69
00:04:56,110 --> 00:04:58,390
Я вызываю этот метод более чем в одном месте.

70
00:04:58,840 --> 00:05:04,090
Другое дело, что если мы рассмотрим такой метод, как создание пользователя-автора, это может быть относительно

71
00:05:04,090 --> 00:05:04,480
просто.

72
00:05:04,930 --> 00:05:08,740
Мы знаем, что с этим методом, или, по крайней мере, я знаю, что это за метод.

73
00:05:09,160 --> 00:05:15,700
Все, что мне нужно для передачи, — это строка электронной почты и строка пароля, и Firebase все поймет.

74
00:05:15,700 --> 00:05:17,260
как аутентифицировать этого пользователя.

75
00:05:17,620 --> 00:05:18,880
Но что, если они изменят это?

76
00:05:18,880 --> 00:05:20,880
Что, если им нужно добавить больше значений?

77
00:05:20,890 --> 00:05:23,170
Может быть, есть больше дополнительных опций, которые они расширяют.

78
00:05:23,350 --> 00:05:27,610
Может быть, есть еще больше шагов, которые будут задействованы здесь, когда это изменится.

79
00:05:27,850 --> 00:05:32,110
Опять же, все, что мне нужно сделать, это изменить эту одну функцию, но то, что я сделал.

80
00:05:33,110 --> 00:05:39,080
Я защитил свое интерфейсное приложение от этой внешней службы, которая может быть изменена.

81
00:05:39,470 --> 00:05:47,420
Теперь это становится намного проще, потому что я определяю, как этот сервис будет взаимодействовать с моим

82
00:05:47,660 --> 00:05:48,770
фронтенд-приложение.

83
00:05:49,130 --> 00:05:55,610
Я добавил эти утилиты как прослойку между кодом внешнего интерфейса и этой дополнительной библиотекой.

84
00:05:55,610 --> 00:05:56,330
с которым я работаю.

85
00:05:57,260 --> 00:06:02,510
Так вот, например, я знаю, что мне нужна электронная почта, и мне также нужен пароль.

86
00:06:03,350 --> 00:06:09,080
Если я не получу ни одну из этих вещей, то есть если я не получу электронное письмо или если я не получу

87
00:06:09,080 --> 00:06:10,830
пароль, то я хочу выйти.

88
00:06:10,850 --> 00:06:17,240
Я не хочу вызывать этот метод, и я хочу вернуть ожидаемое значение из этого метода.

89
00:06:18,290 --> 00:06:21,320
Потому что здесь, после подтверждения подлинности, я хочу увидеть, что я получу в ответ.

90
00:06:21,680 --> 00:06:26,300
Но главное здесь то, что я знаю, что этот метод никогда не вызовет, если я не получу значение электронной почты и

91
00:06:26,300 --> 00:06:27,560
Я не получаю значение пароля.

92
00:06:28,310 --> 00:06:35,480
Теперь, в гораздо более позднем уроке курса, мы узнаем о гораздо более жесткой способности

93
00:06:35,480 --> 00:06:37,880
защитить наш код с помощью TypeScript.

94
00:06:38,060 --> 00:06:39,950
Но пока я не хочу, чтобы ты думал об этом.

95
00:06:39,950 --> 00:06:44,990
Об этом становится слишком много, когда мы уже учимся реагировать и многое другое.

96
00:06:44,990 --> 00:06:47,810
экосистемы React, а также эти конечные шаблоны.

97
00:06:48,080 --> 00:06:53,250
Но я хочу подчеркнуть здесь, что мы сосредоточены на защите нашего кода.

98
00:06:53,810 --> 00:06:58,280
На самом деле мы также можем сделать что-то подобное внутри нашего документа создания пользователя.

99
00:06:58,760 --> 00:07:02,750
Здесь мы можем сказать, что если мы не отключили пользователя, мы также хотим вернуться.

100
00:07:03,290 --> 00:07:04,820
Так что это еще один способ защитить наш код.

101
00:07:05,420 --> 00:07:11,540
Но это просто разные способы, которыми мы говорим, если мы не получаем ни одного из этих аргументов, то

102
00:07:11,540 --> 00:07:12,890
просто не запускайте функцию.

103
00:07:13,920 --> 00:07:18,690
TypeScript делает это значительно проще, но опять же, мы рассмотрим это позже.

104
00:07:18,810 --> 00:07:20,520
Так что следите за этим.

105
00:07:21,060 --> 00:07:26,010
Но здесь, по крайней мере, теперь у нас есть новый метод создания пользователя-автора с адресом электронной почты и паролем.

106
00:07:26,370 --> 00:07:29,160
Проходим то офф, проходим, почту и пароль.

107
00:07:29,310 --> 00:07:34,080
И затем это создаст аутентифицированного пользователя и вернет нам некоторый объект аутентификации.

108
00:07:35,300 --> 00:07:39,500
Теперь давайте импортируем в нашу регистрационную форму только что созданный метод.

109
00:07:40,480 --> 00:07:44,110
И давайте вытащим это из соответствующего места.

110
00:07:45,570 --> 00:07:47,520
Из наших утилит firebase.

111
00:07:47,700 --> 00:07:48,630
Утилиты Firebase.

112
00:07:49,710 --> 00:07:57,480
И теперь, когда у вас есть этот метод, я предлагаю вам создать эту функцию прямо здесь и сейчас.

113
00:07:57,480 --> 00:07:59,640
выяснить, что необходимо для этой функции.

114
00:08:00,480 --> 00:08:04,950
На самом деле это будет ваша первая большая задача, потому что мы узнали много маленьких деталей.

115
00:08:04,950 --> 00:08:06,930
которые необходимы для выполнения этой работы.

116
00:08:06,930 --> 00:08:13,140
Теперь мы достаточно хорошо изучили, как работать с Firebase, чтобы иметь представление о том, что такое объект.

117
00:08:13,140 --> 00:08:16,140
мы собираемся вернуться, если это будет успешным.

118
00:08:17,010 --> 00:08:19,800
И здесь я просто хочу, чтобы вы подумали об этих требованиях.

119
00:08:20,220 --> 00:08:26,220
Итак, сначала давайте просто настроим этот метод, прежде чем я попрошу вас поставить видео на паузу и попробовать сами.

120
00:08:26,970 --> 00:08:29,370
Я просто позвоню этому дескриптору.

121
00:08:30,300 --> 00:08:31,800
Это будет метод.

122
00:08:33,240 --> 00:08:38,070
Это будет использовать поля фермы, чтобы фактически создать этот метод.

123
00:08:38,520 --> 00:08:44,640
Итак, опять же, это асинхронный метод, потому что мы создаем пользовательский документ внутри внешней службы.

124
00:08:45,510 --> 00:08:47,250
и это асинхронный метод.

125
00:08:47,670 --> 00:08:53,970
И поскольку это сработает при обработчике события отправки, мы получим событие.

126
00:08:54,900 --> 00:08:57,180
Так что я собираюсь научить вас, как настроить некоторые из этих основных вещей.

127
00:08:57,660 --> 00:08:59,970
Первое, что мы хотим сделать, это предотвратить дефолт.

128
00:09:00,540 --> 00:09:04,170
По сути, нам не нужно поведение формы по умолчанию.

129
00:09:04,710 --> 00:09:08,610
Мы говорим, что все, что произойдет в той форме, в которой мы собираемся справиться.

130
00:09:09,090 --> 00:09:12,600
Все, что нам нужно от вас, это просто сообщить нам, когда форма была отправлена.

131
00:09:13,530 --> 00:09:17,280
Как только это событие будет предотвращено, вам нужно сделать несколько вещей.

132
00:09:17,790 --> 00:09:23,340
Вам нужно подтвердить, что пароль совпадает, потому что им снова придется вводить два пароля вместе.

133
00:09:24,350 --> 00:09:31,040
Что нам также нужно сделать, так это проверить, аутентифицировали ли мы этого пользователя по электронной почте.

134
00:09:31,040 --> 00:09:31,670
и пароль.

135
00:09:32,420 --> 00:09:39,350
Затем мы хотим создать пользовательский документ из того, что это возвращает.

136
00:09:39,830 --> 00:09:46,670
Итак, шаг за шагом, я хочу, чтобы вы сами попытались собрать воедино этот дескриптор, представить функцию.

137
00:09:47,120 --> 00:09:48,080
Мы делали это раньше.

138
00:09:48,440 --> 00:09:51,050
Мы сделали это, когда использовали наш компонент подписи подписи.

139
00:09:51,050 --> 00:09:55,940
Это будет похоже, за исключением того, что теперь вы просто создаете этого аутентифицированного пользователя с адресом электронной почты и паролем.

140
00:09:56,910 --> 00:09:58,800
Так что пробуйте, проходите.

141
00:09:59,160 --> 00:10:01,680
Используйте эти поля пароля электронной почты.

142
00:10:01,890 --> 00:10:06,990
И не забудьте передать отображаемое имя, когда вы на самом деле пытаетесь создать документ из того, что

143
00:10:06,990 --> 00:10:08,550
мы получаем ответ от автора.

144
00:10:09,240 --> 00:10:13,260
Но я просто хочу, чтобы вы поиграли и повозились с этой реальной функцией.

145
00:10:13,410 --> 00:10:16,110
Протестируйте сами и посмотрите, сможете ли вы реализовать эту функцию.

146
00:10:16,650 --> 00:10:20,130
Так что, как только вы это сделаете, присоединяйтесь ко мне в следующем видео, и мы сделаем это вместе.