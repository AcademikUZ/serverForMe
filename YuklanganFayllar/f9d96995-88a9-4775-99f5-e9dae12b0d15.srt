1
00:00:00,590 --> 00:00:01,610
С возвращением, все.

2
00:00:02,420 --> 00:00:06,350
В этом видео мы собираемся закончить то, что нам нужно для нашего знака и компонента формы.

3
00:00:06,650 --> 00:00:11,420
И мы также собираемся закончить оформление нашей страницы аутентификации для начала.

4
00:00:11,420 --> 00:00:17,570
Что мы хотим сделать, так это мы хотим указать нашим пользователям, если произойдет какая-то ошибка, чтобы

5
00:00:17,570 --> 00:00:18,110
сделать это.

6
00:00:18,420 --> 00:00:21,980
Давайте консоль зарегистрируем ошибку, чтобы мы могли видеть, что происходит.

7
00:00:22,670 --> 00:00:29,660
Итак, давайте вернемся к нашему приложению и здесь, вместо использования электронной почты, давайте просто посмотрим, какие виды

8
00:00:29,660 --> 00:00:32,720
ошибок, которые мы можем получить, когда пытаемся войти без ничего.

9
00:00:33,920 --> 00:00:39,140
Если мы войдем в систему без обязательных полей для заполнения, мы увидим, что получаем это обязательное сообщение, которое

10
00:00:39,140 --> 00:00:43,040
отлично, потому что это означает, что наша форма ввода с required работает.

11
00:00:43,580 --> 00:00:49,640
Итак, я просто собираюсь передать электронное письмо и, скажем, передать неверный пароль, просто неправильный случайный

12
00:00:49,640 --> 00:00:50,090
пароль.

13
00:00:51,270 --> 00:00:56,070
Здесь мы видим, что мы получаем немного воздуха Firebase Air от неправильного пароля.

14
00:00:56,730 --> 00:01:01,410
Так что это отличный вариант, который мы можем использовать аналогично тому, что у нас было раньше.

15
00:01:01,830 --> 00:01:08,100
Можно сказать, что если air decode равен auth неправильный пароль.

16
00:01:08,340 --> 00:01:15,660
И что мы хотим сделать, так это предупредить пользователя о неправильном пароле, чтобы мы могли

17
00:01:15,660 --> 00:01:17,880
скажите неправильный пароль для электронной почты.

18
00:01:18,570 --> 00:01:19,530
Давайте сохраним это.

19
00:01:20,190 --> 00:01:21,090
Вернемся сюда.

20
00:01:21,840 --> 00:01:22,860
Давайте попробуем это снова.

21
00:01:23,460 --> 00:01:24,170
И там мы это видим.

22
00:01:24,190 --> 00:01:25,710
Неверный пароль для электронной почты.

23
00:01:26,780 --> 00:01:34,160
Точно так же, если у нас есть какая-то электронная почта, которой здесь нет, если мы войдем в систему, мы увидим, что

24
00:01:34,160 --> 00:01:36,410
получаем, что пользователь не найден.

25
00:01:37,540 --> 00:01:43,990
Итак, здесь мы могли бы сделать оператор if и сделать аналогичный код ошибки, равный этому.

26
00:01:44,470 --> 00:01:48,070
Но что, если вместо этого я хочу сделать оператор switch.

27
00:01:48,550 --> 00:01:54,460
Так что этот оператор switch позволяет мне выполнять код в зависимости от того, что совпало.

28
00:01:54,460 --> 00:01:55,600
внутри аэропорта.

29
00:01:56,440 --> 00:02:04,300
И что я могу сказать, так это то, что если в этом конкретном случае код ошибки равен auth dash неправильно

30
00:02:04,300 --> 00:02:04,930
пароль.

31
00:02:07,000 --> 00:02:07,480
Вот так.

32
00:02:08,520 --> 00:02:13,050
Тогда то, что я хотел сделать, это то, что я хотел предупредить неправильно.

33
00:02:14,560 --> 00:02:16,450
Пароль для электронной почты.

34
00:02:17,460 --> 00:02:20,700
А потом я хочу перерыв и объясню, после чего перерыв.

35
00:02:21,390 --> 00:02:27,390
Итак, сначала давайте просто закомментируем этот код и сделаем то же самое для другого.

36
00:02:29,710 --> 00:02:31,870
Так что я собираюсь сделать еще один случай.

37
00:02:33,100 --> 00:02:33,670
За.

38
00:02:34,610 --> 00:02:39,740
Авторы не обнаруживают такой же бдительности в данном конкретном случае.

39
00:02:39,990 --> 00:02:44,990
Нет пользователя, связанного с этим адресом электронной почты.

40
00:02:46,150 --> 00:02:47,050
И мы снова сломаемся.

41
00:02:48,500 --> 00:02:54,770
И тогда по умолчанию мы просто выводим сообщение об ошибке в console.log, предполагая, что мы не знаем, что это такое.

42
00:02:56,410 --> 00:02:57,670
Так в данном конкретном случае.

43
00:02:58,700 --> 00:03:02,270
Что мы видим внутри нашего оператора поиска?

44
00:03:02,480 --> 00:03:03,200
Итак, давайте сломаем это.

45
00:03:03,890 --> 00:03:10,370
То, что делает Switch, эквивалентно почти тому, чтобы сказать, если и тогда с этим кодом равно

46
00:03:10,370 --> 00:03:17,600
это, если оно равно этому прогону, этому еще, проверить, равно ли это, если да, запустить это и

47
00:03:17,600 --> 00:03:19,670
в противном случае, если ни одно из них не совпадает.

48
00:03:19,670 --> 00:03:24,920
Если ни одна из этих строк не соответствует коду ошибки, то по умолчанию просто запустите этот код.

49
00:03:25,400 --> 00:03:31,010
По сути, разрыв говорит о том, что, как только вы нашли совпадение, не проверяйте следующие последующие случаи.

50
00:03:31,400 --> 00:03:36,080
Вы можете себе представить, что было бы, если бы у нас здесь было пять разных дел, и у нас не было бы этого перерыва.

51
00:03:36,590 --> 00:03:43,280
Что происходит, так это то, что, по сути, без этих разрывов наш код будет, скажем, соответствовать

52
00:03:43,280 --> 00:03:44,090
неверный пароль.

53
00:03:44,870 --> 00:03:49,130
Допустим, он соответствует, он собирается запустить оповещение, но затем он будет пытаться сопоставлять эти

54
00:03:49,130 --> 00:03:52,100
случаев, хотя мы знаем, что код ошибки уже нашел совпадение.

55
00:03:52,730 --> 00:03:56,480
Таким образом, с перерывом это позволяет нам предотвратить это.

56
00:03:56,780 --> 00:04:02,570
Теперь я хочу упомянуть одну вещь: некоторые из вас, возможно, задаются вопросом, где мы можем найти все

57
00:04:02,570 --> 00:04:03,680
эти коды ошибок?

58
00:04:04,310 --> 00:04:11,540
К сожалению, сейчас нет реального места компиляции или списка, который firebase для аутентификации

59
00:04:11,930 --> 00:04:17,540
в нашей текущей версии, которая демонстрирует, какими будут все эти коды ошибок и что они из себя представляют.

60
00:04:17,900 --> 00:04:22,910
Если вы все-таки найдете его, пожалуйста, пришлите его мне, потому что я долго искал и

61
00:04:22,910 --> 00:04:28,460
на самом деле это обычное дело в этом сообществе, использующем Firebase, что Google еще не предоставил это

62
00:04:28,460 --> 00:04:31,280
полный список этих кодов ошибок, а также что они из себя представляют.

63
00:04:32,060 --> 00:04:38,990
Но это не мешает нам, по крайней мере, обратиться к этим основным и наблюдаемым в настоящее время основным кодам ошибок.

64
00:04:38,990 --> 00:04:41,180
которые, как мы знаем, наиболее важны для назначения.

65
00:04:41,690 --> 00:04:47,000
Итак, теперь, когда у нас есть наши оповещения, есть еще одна вещь, которую я хочу, чтобы вы увидели, если я прокрутю вниз.

66
00:04:47,000 --> 00:04:54,350
здесь и я смотрю на эту кнопку, нашу кнопку Google, если мы вернемся сюда, мы знаем, что когда я нажимаю

67
00:04:54,350 --> 00:04:55,340
вход в Google.

68
00:04:55,880 --> 00:05:00,860
Что происходит, так это то, что я должен просто открыть наше всплывающее окно Google, но давайте посмотрим, что произойдет.

69
00:05:01,070 --> 00:05:02,000
У меня был вход в Google.

70
00:05:02,720 --> 00:05:05,960
Я действительно вижу, что у нас есть всплывающее окно Google.

71
00:05:06,500 --> 00:05:10,580
Но я также вижу, что по какой-то причине сработало наше оповещение.

72
00:05:10,640 --> 00:05:17,750
Нет пользователя, связанного с этим электронным письмом, что, как мы знаем, является нашей ошибкой, которую мы видим для связанного электронного письма.

73
00:05:18,470 --> 00:05:22,490
Но почему, когда я нажимаю значок Google в этой форме, я также пытался отправить?

74
00:05:23,150 --> 00:05:30,110
Причина этого в том, что по умолчанию кнопки имеют тип отправки внутри форм для нас.

75
00:05:30,110 --> 00:05:35,150
Чтобы этого не произошло, мы должны просто сказать, что тип этой кнопки — это просто кнопка.

76
00:05:35,750 --> 00:05:39,890
И теперь, если мы сохраним это и вернемся, мы очистим это.

77
00:05:40,280 --> 00:05:41,450
У нас был вход в Google.

78
00:05:42,420 --> 00:05:47,970
Мы видим, что мы не заметили, что у нас есть ошибка, а также наше предупреждение не сработало.

79
00:05:48,810 --> 00:05:55,590
Так что это почти единственные последние несколько настроек, которые нам нужно сделать для этого кода, чтобы он

80
00:05:55,590 --> 00:05:56,040
работать.

81
00:05:56,820 --> 00:06:02,700
Так что давайте пока тоже оставим ответ, потому что после этого урока по аутентификации

82
00:06:02,700 --> 00:06:07,830
еще пара вещей, которые мы хотим сделать с объектом пользователя, но давайте просто приведем в порядок визуальные эффекты нашего

83
00:06:07,830 --> 00:06:08,850
аутентификация.

84
00:06:09,540 --> 00:06:11,580
Итак, давайте перейдем к нашему компоненту аутентификации.

85
00:06:12,030 --> 00:06:17,980
И что я хочу сделать, так это избавиться от этого импорта, потому что он мне определенно больше не нужен.

86
00:06:18,570 --> 00:06:25,860
Но я также хочу создать некоторые стили, чтобы я мог убедиться, что страница аутентификации выглядит так, как

87
00:06:25,860 --> 00:06:26,610
это должно быть.

88
00:06:27,150 --> 00:06:29,330
Итак, давайте создадим стили аутентификации.

89
00:06:29,340 --> 00:06:32,700
Это приятно и смотреть на сам компонент.

90
00:06:33,950 --> 00:06:40,970
Что я хочу сделать, так это дать этому классу имя, и я назову его аутентификацией.

91
00:06:40,970 --> 00:06:41,690
контейнер.

92
00:06:43,120 --> 00:06:46,120
И здесь мне тоже больше не нужна эта страница входа.

93
00:06:46,180 --> 00:06:52,300
С H1 покончено, и это имя класса контейнера аутентификации — это то, что я хочу стилизовать.

94
00:06:53,080 --> 00:07:00,130
Так что, если внутри, я просто буду отображать направление flex flex в этом конкретном случае или не flex

95
00:07:00,130 --> 00:07:00,520
направление.

96
00:07:00,940 --> 00:07:03,670
Я собираюсь сказать, что оправдание содержания — это пространство между ними.

97
00:07:04,790 --> 00:07:10,430
Я также собираюсь установить ширину, и я собираюсь дать ей 900 пикселей, потому что я знаю, что каждый внутри

98
00:07:10,430 --> 00:07:12,230
триста восемьдесят пикселей, как мы установили.

99
00:07:12,800 --> 00:07:19,070
А что касается поля, я хочу, чтобы верхнее нижнее поле было 30 пикселей, но затем я хочу автоматические поля на

100
00:07:19,070 --> 00:07:21,830
сторону, чтобы он был по центру, независимо от того, насколько большим становится ваш экран.

101
00:07:22,550 --> 00:07:26,960
И, наконец, я хочу убедиться, что я импортирую в эту новую таблицу стилей, которую мы создали.

102
00:07:29,050 --> 00:07:30,130
Так вот вернемся.

103
00:07:31,570 --> 00:07:32,380
И вот мы идем.

104
00:07:32,860 --> 00:07:35,020
Мы видим, что у нас есть свой знак и страница.

105
00:07:35,380 --> 00:07:36,940
Сейчас все примерно работает.

106
00:07:37,540 --> 00:07:38,230
Вот и все.

107
00:07:38,380 --> 00:07:41,500
Мы закончили стилизацию страницы входа в следующем видео.

108
00:07:41,500 --> 00:07:47,710
Что мы собираемся сделать, так это узнать, что делать с этим пользователем, которого мы только что подписали.

109
00:07:48,160 --> 00:07:52,780
И мы должны подумать о том, как использование этого пользователя позволяет нам выполнять определенные функции.

110
00:07:53,290 --> 00:07:55,150
Итак, мы собираемся подумать о цели пользователя.

111
00:07:55,390 --> 00:07:59,500
Мы также собираемся подумать о том, как в React мы собираемся хранить и использовать этого пользователя.

112
00:07:59,920 --> 00:08:03,970
Итак, присоединяйтесь ко мне на следующем уроке, где мы поговорим о контексте реакции.

113
00:08:04,360 --> 00:08:05,380
Увидимся в следующем видео.