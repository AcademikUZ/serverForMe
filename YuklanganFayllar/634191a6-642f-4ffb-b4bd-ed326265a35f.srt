1
00:00:00,570 --> 00:00:01,650
С возвращением, все.

2
00:00:02,220 --> 00:00:05,760
В последнем видео мы узнали о входе в систему с помощью нашего всплывающего окна Google.

3
00:00:06,330 --> 00:00:11,160
Мы также узнали о том, как сохранить этого пользователя Google в нашей базе данных Fire Store.

4
00:00:11,580 --> 00:00:16,830
В этом видео мы узнаем о других методах аутентификации, которые нам предоставляет Google.

5
00:00:17,220 --> 00:00:20,310
Однако также через Firebase, который входит в систему с перенаправлением.

6
00:00:20,640 --> 00:00:25,650
И теперь, когда мы настроили весь этот код, он практически работает для любого метода аутентификации.

7
00:00:26,370 --> 00:00:29,460
Итак, первое, что я хочу сделать, это войти в эту коллекцию.

8
00:00:29,820 --> 00:00:34,620
Вы заметите, что я уже удалил свою коллекцию, и причина этого в том, что я хочу

9
00:00:34,620 --> 00:00:40,200
обязательно покажите, что когда тот же пользователь входит в систему, но с другим методом перенаправления,

10
00:00:40,200 --> 00:00:44,500
все еще собирается сгенерировать и создать тот же документ.

11
00:00:44,520 --> 00:00:48,990
Я также удалил пользователя из своей аутентификации, чтобы вы могли сделать это самостоятельно.

12
00:00:49,020 --> 00:00:50,190
Вы также можете просто посмотреть, как я это делаю.

13
00:00:50,460 --> 00:00:56,160
На самом деле, это довольно просто, но теперь, когда я удалил их, я хочу пойти

14
00:00:56,160 --> 00:00:57,390
вернуться в это приложение.

15
00:00:58,350 --> 00:01:04,230
И вы заметите, что здесь, в утилитах Firebase, я также импортировал вход с перенаправлением.

16
00:01:04,860 --> 00:01:05,940
Так что теперь мы собираемся использовать его.

17
00:01:06,510 --> 00:01:13,170
И это очень просто для того, чтобы использовать его вместо этого, где мы экспортируем этот постоянный вход с помощью Google,

18
00:01:13,170 --> 00:01:17,970
Я хочу войти с помощью Google Redirect.

19
00:01:19,220 --> 00:01:20,240
И это будет то же самое.

20
00:01:20,480 --> 00:01:24,650
Это будет просто анонимная функция, которая вызывает вход с помощью.

21
00:01:25,790 --> 00:01:26,450
Перенаправить.

22
00:01:27,290 --> 00:01:30,290
И я еду в части севера, и я тоже собираюсь пройти мимо провайдера.

23
00:01:31,690 --> 00:01:32,320
Так вот.

24
00:01:33,430 --> 00:01:35,270
Я хочу, чтобы вы заметили одну вещь.

25
00:01:35,800 --> 00:01:40,900
Обратите внимание, как с этим входом с всплывающим окном и входом с перенаправлениями, они являются общими, и они приняты

26
00:01:40,900 --> 00:01:42,520
отключают и берут провайдера.

27
00:01:42,880 --> 00:01:47,080
Я звоню своему, войдите в систему с помощью Google, всплывающее окно и войдите в систему с помощью Google Redirect.

28
00:01:47,680 --> 00:01:52,660
Причина этого, как я упоминал ранее, в том, что у вас могут быть разные провайдеры,

29
00:01:52,840 --> 00:01:56,500
хотите ли вы войти с помощью Facebook, хотите ли вы войти с помощью GitHub.

30
00:01:56,770 --> 00:02:00,010
Это все разные провайдеры, которых вы можете подключить.

31
00:02:00,460 --> 00:02:03,790
Так что здесь, если мы посмотрим, вероятно, есть провайдер аутентификации Facebook.

32
00:02:04,120 --> 00:02:08,990
Как и в случае с Google Provider, вы можете создать нового поставщика и передать его.

33
00:02:09,250 --> 00:02:11,890
И теперь у вас есть еще один доступный метод подписи.

34
00:02:12,100 --> 00:02:16,930
Вот почему эти провайдеры создают экземпляры как классы, как я упоминал ранее, тогда как эти приложения

35
00:02:16,930 --> 00:02:17,470
не.

36
00:02:18,010 --> 00:02:23,620
Так что это важно отметить, потому что здесь я, по сути, говорю, что знаю, что это всплывающее окно

37
00:02:23,620 --> 00:02:28,450
будет Google, потому что провайдер, которого я создаю для него, является провайдером Google.

38
00:02:28,690 --> 00:02:35,110
Если мы хотим быть более явными, мы могли бы сказать, поставщик Google, как так, и мы можем изменить его так, как

39
00:02:35,110 --> 00:02:35,380
Что ж.

40
00:02:36,100 --> 00:02:39,400
Таким образом, становится понятнее, хотим ли мы, чтобы наш код был таким.

41
00:02:39,730 --> 00:02:43,810
Итак, давайте просто сделаем это, чтобы мы поняли, по крайней мере, что есть несколько разных

42
00:02:43,810 --> 00:02:44,770
доступные провайдеры.

43
00:02:45,400 --> 00:02:48,400
Но как только мы это настроим, я хочу показать вам это перенаправление сейчас.

44
00:02:48,910 --> 00:02:51,410
Поэтому я собираюсь скопировать этот вход с помощью Google Redirect.

45
00:02:51,460 --> 00:02:57,760
Я собираюсь войти в свой компонент входа, а также импортировать вход с помощью Google Redirect.

46
00:02:58,850 --> 00:03:03,830
И здесь я собираюсь сделать, я просто собираюсь продублировать этот код кнопки, и здесь я собираюсь сказать

47
00:03:03,830 --> 00:03:06,110
войдите с помощью Google Redirect.

48
00:03:07,300 --> 00:03:10,790
Одна вещь, однако, которую мы собираемся изменить, это при клике.

49
00:03:10,810 --> 00:03:12,760
И нам придется изменить его более чем одним способом.

50
00:03:13,360 --> 00:03:14,440
Но показать вам, почему?

51
00:03:14,470 --> 00:03:20,530
Что я собираюсь сделать, так это сначала просто запустить журнал соревнований Google Redirect user.

52
00:03:22,590 --> 00:03:24,660
И давайте избавимся от этого прямо здесь.

53
00:03:25,650 --> 00:03:30,870
Вместо того, чтобы подписываться с помощью всплывающего окна Google, я хочу войти с помощью Google Redirect, и я просто собираюсь

54
00:03:30,870 --> 00:03:32,460
для консоли Dot Log здесь.

55
00:03:32,670 --> 00:03:33,270
Пользователь?

56
00:03:36,300 --> 00:03:40,020
А потом я включу это в щелчок, чтобы вы могли видеть, что произойдет.

57
00:03:40,500 --> 00:03:42,960
Итак, мы сохраним это и перейдем к нашему приложению.

58
00:03:44,570 --> 00:03:48,050
Вот, что мы собираемся сделать сейчас, это щелкнуть по этому входу с помощью Google Redirect.

59
00:03:48,620 --> 00:03:55,730
Что происходит, так это то, что теперь мы попадаем на эту отдельную страницу, где нас просят войти с помощью

60
00:03:55,730 --> 00:03:58,760
Google очень похож на всплывающее окно, за исключением того, что это отдельная страница.

61
00:03:59,660 --> 00:04:00,800
Я собираюсь щелкнуть этого пользователя.

62
00:04:01,430 --> 00:04:04,540
Что произойдет, так это вернет нас на наш веб-сайт.

63
00:04:05,090 --> 00:04:08,450
Но вы заметите, что мой пользователь не получает много звонков.

64
00:04:09,450 --> 00:04:19,860
И если мы зайдем в это приложение, мы увидим, действительно ли пользователь сейчас находится внутри моей аутентификации.

65
00:04:20,580 --> 00:04:28,050
Однако любой код, который впоследствии следовал за фактическим входом пользователя с перенаправлением, не является

66
00:04:28,050 --> 00:04:29,130
на самом деле срабатывает.

67
00:04:29,820 --> 00:04:31,170
Почему это происходит?

68
00:04:31,770 --> 00:04:37,890
Что ж, если подумать, то, что только что произошло, это то, что наш веб-сайт полностью перенаправил нас

69
00:04:38,070 --> 00:04:39,840
на новый отдельный домен.

70
00:04:40,230 --> 00:04:41,310
Когда мы вернулись.

71
00:04:42,290 --> 00:04:48,260
Наш веб-сайт не знает, что был какой-то предыдущий момент состояния этого веб-сайта, в котором мы находились.

72
00:04:48,260 --> 00:04:50,960
на паузе, веб так не работает.

73
00:04:51,290 --> 00:04:57,380
Когда вы уходите от URL-адреса, веб-сайт думает: «О, хорошо, я собираюсь избавиться от всего».

74
00:04:57,380 --> 00:04:59,450
Я собираюсь размонтировать все приложение.

75
00:04:59,690 --> 00:05:00,440
Мы закончили.

76
00:05:00,830 --> 00:05:02,060
Зачем мне держаться за это?

77
00:05:02,060 --> 00:05:03,320
Я не знаю, вернешься ты или нет.

78
00:05:04,160 --> 00:05:09,470
Итак, когда мы вернулись, мы, по сути, повторно инициализируем все наше приложение из

79
00:05:09,470 --> 00:05:15,080
начать с нуля, что означает, что любые ранее проведенные функции, которые мы, возможно,

80
00:05:15,410 --> 00:05:16,400
больше не имеет значения.

81
00:05:16,520 --> 00:05:18,050
Там нет возможности продолжить оттуда.

82
00:05:18,500 --> 00:05:24,260
По этой причине нам нужно использовать другой способ, чтобы фактически отслеживать этот тип информации.

83
00:05:24,980 --> 00:05:26,240
Итак, что мы собираемся делать?

84
00:05:27,150 --> 00:05:33,180
И я покажу вам, что сначала нам нужно импортировать несколько вещей, которые нам нужны, чтобы импортировать эффект использования.

85
00:05:33,180 --> 00:05:33,930
из Реакта.

86
00:05:35,080 --> 00:05:39,400
Нам также нужно импортировать метод из Firebase off.

87
00:05:40,790 --> 00:05:44,130
И этот метод называется Get Redirect a result.

88
00:05:44,150 --> 00:05:44,840
Вот этот.

89
00:05:46,170 --> 00:05:51,600
Кроме того, в наших утилитах мы также должны убедиться, что мы их получаем, потому что это то, что

90
00:05:51,600 --> 00:05:53,520
будет получен результат перенаправления get.

91
00:05:55,960 --> 00:06:01,330
Наконец, что нам нужно сделать, это я просто собираюсь вместо того, чтобы делать этот журнал перенаправления пользователя Google.

92
00:06:01,720 --> 00:06:03,550
Я просто позвоню напрямую.

93
00:06:05,050 --> 00:06:10,300
Вход с помощью Google Redirect, потому что, как мы знаем, эта функция, которая у нас была раньше, ничего не делала.

94
00:06:10,300 --> 00:06:17,230
для нас после того, как этот метод внутренне вызвал метод входа с помощью метода перенаправления уже после того, как он был вызван

95
00:06:17,710 --> 00:06:20,560
приложение, как только мы снова уйдем на монтирование.

96
00:06:21,250 --> 00:06:24,550
Итак, теперь мы говорим, что это внутри этого кода?

97
00:06:25,570 --> 00:06:31,840
Я хочу запустить эффект использования, и я хочу запустить его, когда это приложение монтируется.

98
00:06:32,050 --> 00:06:34,450
Итак, когда компонент входа монтируется в первый раз.

99
00:06:34,510 --> 00:06:41,350
Помните, когда вы передаете пустой массив, это означает, что эта функция запускается один раз при монтировании этого компонента.

100
00:06:41,350 --> 00:06:42,070
в первый раз.

101
00:06:42,340 --> 00:06:48,790
Функция здесь является нашим обратным вызовом внутри, я хочу позвонить, получить результат перенаправления, получить перенаправление

102
00:06:48,790 --> 00:06:49,150
результат.

103
00:06:49,150 --> 00:06:50,430
Я собираюсь передать это и уйти.

104
00:06:50,440 --> 00:06:55,150
А поскольку это асинхронный метод, получение результата перенаправления происходит асинхронно.

105
00:06:55,570 --> 00:06:57,760
Я собираюсь сказать постоянный ответ.

106
00:06:59,640 --> 00:07:03,690
Равен весу, чтобы получить результат перенаправления.

107
00:07:04,950 --> 00:07:07,050
А потом я запишу ответ в console.log.

108
00:07:08,800 --> 00:07:10,120
А теперь я хочу сказать об этом размахе.

109
00:07:11,230 --> 00:07:15,520
Итак, что происходит сейчас, так это то, что, по сути, мы собираемся войти с помощью перенаправления Google.

110
00:07:16,240 --> 00:07:22,930
Затем мы попадем на страницу, где мы собираемся выбрать нашего пользователя Google, когда вернемся.

111
00:07:22,990 --> 00:07:27,820
Что произойдет, так это то, что наше приложение будет перемонтировано, что означает, что этот компонент подписи будет

112
00:07:27,820 --> 00:07:33,460
remount, потому что мы возвращаемся на страницу подписи, где компонент подписи находится на Mount.

113
00:07:33,760 --> 00:07:37,960
Этот эффект использования запустит этот обратный вызов один раз на горе.

114
00:07:38,470 --> 00:07:42,700
И тогда произойдет то, что внутри этого обратного вызова мы скажем: Эй, дай мне

115
00:07:42,700 --> 00:07:46,450
ответ на перенаправление, которое только что произошло.

116
00:07:47,080 --> 00:07:50,200
Откуда вы знаете, какой редирект происходит, когда он основан на выключенном?

117
00:07:50,680 --> 00:07:56,140
И вот почему это синглтон, потому что эта аутентификация помогает нам отслеживать все эти аутентификации.

118
00:07:56,140 --> 00:07:58,690
состояния, которые происходят во всем приложении.

119
00:07:58,810 --> 00:08:05,050
Вы можете видеть это так, как будто какой-то банк памяти аутентификации отслеживает все наши аутентификационные данные.

120
00:08:05,050 --> 00:08:12,370
состояния для нашего веб-сайта и для нашего экземпляра Firebase, независимо от того, куда идет веб-сайт.

121
00:08:13,120 --> 00:08:14,860
Вот почему это так полезно.

122
00:08:15,070 --> 00:08:20,830
Итак, теперь, когда у нас есть наш код, если мы вернемся к нашему приложению, мы увидим, что на начальном mt. это значение,

123
00:08:20,830 --> 00:08:23,800
мы получаем обратно от этого пробела перенаправления пользователя нет.

124
00:08:24,280 --> 00:08:26,710
Причина, конечно, в том, что наше приложение обновилось.

125
00:08:26,710 --> 00:08:28,390
Не было перенаправления, которое произошло.

126
00:08:28,540 --> 00:08:30,190
Так что мы ожидаем, что это будет нет, это хорошо.

127
00:08:30,790 --> 00:08:33,010
Но теперь, если мы нажмем войти с помощью Google Redirect.

128
00:08:34,140 --> 00:08:36,750
И внутри мы выбираем нашего пользователя Google.

129
00:08:38,040 --> 00:08:45,180
Как только мы возвращаемся, наше приложение молчит, количество компонентов, запуски являются начальным эффектом.

130
00:08:45,510 --> 00:08:49,440
И вот теперь мы видим, что действительно получаем ответ.

131
00:08:49,860 --> 00:08:53,880
И на нем в ответе наш пользователь с нашим UID.

132
00:08:54,300 --> 00:08:59,400
И вся необходимая информация, которая нам нужна для создания этого документа профиля сейчас.

133
00:08:59,760 --> 00:09:04,950
Итак, теперь, когда у нас есть это, давайте продолжим с тем, что у нас было раньше, где мы создали

134
00:09:04,980 --> 00:09:06,360
эта ссылка на документ пользователя.

135
00:09:06,720 --> 00:09:10,930
И здесь мы можем просто сказать, если ответ, что означает, что он не нулевой.

136
00:09:11,010 --> 00:09:15,510
И мы получаем что-то взамен, потому что мы увидели, что есть шанс, когда мы смонтируем, мы не пришли из

137
00:09:15,510 --> 00:09:16,020
перенаправление.

138
00:09:16,410 --> 00:09:17,070
Может быть, это не так.

139
00:09:17,550 --> 00:09:23,250
Тогда мы можем сказать: О, теперь я хочу, чтобы вы создали это из ответа пользователя.

140
00:09:25,670 --> 00:09:30,200
Итак, теперь мы делаем то же самое, что и раньше, просто говорим, что если ответ не равен нулю

141
00:09:30,200 --> 00:09:34,010
и это действительно объект, тогда я хочу, чтобы вы создали ссылку на документ.

142
00:09:34,370 --> 00:09:36,440
Так что, если мы вернемся сейчас и освежим.

143
00:09:37,770 --> 00:09:43,290
Теперь мы заметим, если войдем в систему с помощью Google Redirect, а затем щелкнем нашего пользователя.

144
00:09:44,160 --> 00:09:45,750
Входим под своим пользователем.

145
00:09:48,590 --> 00:09:49,430
Мы возвращаемся сюда.

146
00:09:50,030 --> 00:09:50,900
Все монтируется.

147
00:09:51,410 --> 00:09:56,090
Конечно, мы ничего не логируем, но если мы заходим в нашу консоль Firebase, мы открываем нашу базу данных.

148
00:09:57,370 --> 00:09:59,080
Мы должны увидеть нашего пользователя.

149
00:10:00,480 --> 00:10:01,050
Итак, поехали.

150
00:10:01,530 --> 00:10:03,510
Здесь все работает так, как ожидалось.

151
00:10:04,140 --> 00:10:09,270
Так что это просто для того, чтобы показать вам другой способ, которым вы можете использовать разные назначения и методы.

152
00:10:09,540 --> 00:10:14,100
Мы видели это при входе в Google Redirect с всплывающим окном, а также в Firebase Utils.

153
00:10:14,100 --> 00:10:19,170
Главное, что я хотел, чтобы вы знали, это то, что существует множество способов предоставления различных

154
00:10:19,170 --> 00:10:21,540
провайдеры, авторы Google, только один из них.

155
00:10:21,810 --> 00:10:26,130
И это то, что я говорил ранее, когда упомянул, что есть причина, по которой это класс

156
00:10:26,130 --> 00:10:28,050
и эти другие примеры.

157
00:10:28,170 --> 00:10:29,580
Мы только что увидели причину.

158
00:10:30,030 --> 00:10:36,180
Как мы видели с этим результатом перенаправления, авторы являются одноэлементными, потому что они отслеживают аутентификацию.

159
00:10:36,180 --> 00:10:41,100
состояние всего приложения, когда пользователь входит в систему с помощью различных средств и методов.

160
00:10:41,250 --> 00:10:46,350
Нам нужен какой-то способ быть уверенным в том, что именно сделал пользователь, особенно в рамках

161
00:10:46,350 --> 00:10:51,420
этот браузер, где всякий раз, когда вы уходите со своего веб-сайта, вы нарушаете экземпляр

162
00:10:51,420 --> 00:10:52,140
сайт сейчас.

163
00:10:52,410 --> 00:10:57,240
Таким образом, это единственный способ, с помощью которого мы можем отслеживать, правильно ли пользователи аутентифицируются или

164
00:10:57,240 --> 00:10:57,480
нет.

165
00:10:57,720 --> 00:11:00,840
И это то, что хорошо в этом сервисе Firebase.

166
00:11:01,320 --> 00:11:05,820
Пока вы следуете шаблонам, которые он предоставляет, он как бы обходит многие из этих различных

167
00:11:05,820 --> 00:11:06,720
проблемы, которые присутствуют.

168
00:11:07,380 --> 00:11:11,490
Но вот, теперь, когда мы это настроили, я собираюсь избавиться от этого, потому что нам это на самом деле не нужно.

169
00:11:11,490 --> 00:11:12,030
больше.

170
00:11:12,480 --> 00:11:16,580
На самом деле я просто хотел показать вам этот шаблон, и я знаю, что в этом шаблоне много сложностей.

171
00:11:16,590 --> 00:11:20,310
Мы узнаем о настройке эффектов, но, надеюсь, логика вам понятна.

172
00:11:21,030 --> 00:11:25,200
Но я просто собираюсь избавиться от этого, потому что я просто хочу сохранить метод входа.

173
00:11:25,500 --> 00:11:33,900
На самом деле это своего рода боковая панель для нас, чтобы узнать больше о методах Firebase, а также об аутентификации.

174
00:11:35,370 --> 00:11:38,670
Итак, теперь, когда мы вернулись к этому, давайте продолжим следующий урок.